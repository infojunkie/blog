<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.karimratib.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.karimratib.me/" rel="alternate" type="text/html" /><updated>2025-05-21T08:26:45-07:00</updated><id>https://blog.karimratib.me/feed.xml</id><title type="html">infojunkie</title><subtitle></subtitle><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><entry><title type="html">Music Grimoire: A progress report</title><link href="https://blog.karimratib.me/2024/10/01/music-grimoire-progress-report.html" rel="alternate" type="text/html" title="Music Grimoire: A progress report" /><published>2024-10-01T00:00:00-07:00</published><updated>2024-10-01T00:00:00-07:00</updated><id>https://blog.karimratib.me/2024/10/01/music-grimoire-progress-report</id><content type="html" xml:base="https://blog.karimratib.me/2024/10/01/music-grimoire-progress-report.html"><![CDATA[<p>About 7 years ago, I had a flash of insight: Music software is strongly biased towards Western mainstream music, and most tools are programmed with the “axioms” of this music as their foundation. Things like 12 notes per octave, tuned to intervals that are specific to the 12-TET tuning, with predefined scales and modes - these are hard-coded into the lowest layers of most music software and make it almost impossible to express musical ideas outisde this framework.</p>

<p>I <a href="/2018/01/05/music-l10n.html">wrote a manifesto of sorts</a> about it and naively set off to code my way out of this situation. I was driven by my own musical interests: Rediscovering and arranging songs from the popular Arabic repertoire into modern idioms. Although I achieved <a href="https://musescore.com/user/55682/sets/2178286">a modest milestone towards that particular goal</a>, it opened up a universe of questions and possibilities about how music is computed, notated, played back. I have not stopped learning and coding in this space since then.</p>

<p>Here is a snapshot of where I am in this journey, and where (I think) I am headed.</p>

<h2 id="an-open-source-standards-based-unix-inspired-global-music-ecosystem">An open source, standards-based, Unix-inspired, global-music ecosystem</h2>
<p>At the core of my vision is an ecosystem of tools for publishing interactive musical ideas, ultimately delivered through the Web. The target audience includes music practitioners and institutions that are looking to publish interactive music material on the Web, like music teachers, university departments, cultural heritage institutions. Of course, Web-based music publishing already exists: It <em>is</em> possible to <a href="/2020/10/08/music-blogging.html">embed music scores via various platforms</a>. But these platforms are proprietary, commercial, unextensible, and Western-music-centric. To me, this feels too restrictive for something as important as music. I am aiming for something more inclusive.</p>

<p>To produce an open music publishing system for the Web, I need to build on open standards:</p>
<ul>
  <li><a href="https://www.w3.org/2021/06/musicxml40/">MusicXML</a> is the W3C format for music sheet exchange - based on XML that I’ve come to appreciate for its maturity and incredible ecosystem of tools.</li>
  <li><a href="https://midi.org/specs">MIDI</a> is the 40+ years old (and evolving) standard protocol for communicating musical devices - in our context, it’s used to both encode the music content that is converted from MusicXML (via MIDI files) and to produce the actual sound (via MIDI synths).</li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API">Web Audio API</a> is the W3C API for producing audio within Web applications.</li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API">Web MIDI API</a> is the W3C API for integrating Web applications with MIDI devices.</li>
  <li><a href="https://www.smufl.org/">SMuFL</a> is a Unicode extension to represent musical symbols, also part of the W3C Music Notation Community Group with maintains MusicXML.</li>
</ul>

<p>By careful adherence to these standards, music applications can be built to transcend the limiting assumptions of Western mainstream practice. In some cases, <a href="https://github.com/w3c/smufl/issues/44">it is necessary to get involved in tweaking the standards</a>, and in many cases, <a href="https://github.com/musescore/MuseScore/pull/6693">open source implementations of these standards are incomplete or incorrect and need fixing</a>.</p>

<p>The general workflow I have in mind for music publishing involves the following steps:</p>
<ul>
  <li>Express musical ideas into MusicXML (by explicit score writing or by generation from other sources)</li>
  <li>Convert MusicXML to MIDI for playback (with optional augmentation such as auto-generated accompaniments)</li>
  <li>Load MusicXML in a Web player for display using existing components such as <a href="https://opensheetmusicdisplay.org">OSMD</a>, <a href="https://verovio.org">Verovio</a>, etc.</li>
  <li>Play MIDI in the Web player via Web MIDI or Web Audio using existing components such as <a href="https://tonejs.github.io/">Tone.js</a>, <a href="https://surikov.github.io/webaudiofont/">WebAudioFont</a>, etc.</li>
</ul>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/music-workflow.svg">
      <img src="/assets/music-workflow-dark.svg" style="max-width: 100%;" alt="The general music workflow from score production to playback with associated GitHub repos." />
    </a>
    <figcaption>The general music workflow from score production to playback with associated GitHub repos.</figcaption>
  </figure>
</div>

<p>What follows is a quick overview of the tools that I am maintaining to support this workflow.</p>

<h2 id="lead-sheets-to-musicxml">Lead sheets to MusicXML</h2>
<p>For pop/rock/jazz players, lead sheets are essential to convey the crux of a tune. To support the use case of playing lead sheets, I’ve created <a href="https://github.com/infojunkie/ireal-musicxml"><code class="language-plaintext highlighter-rouge">ireal-musicxml</code>, a library to convert iReal Pro lead sheets to MusicXML</a>. For example, this iReal Pro tune:</p>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/9.20-special-ireal.jpg">
      <img src="/assets/9.20-special-ireal.jpg" style="max-width: 50%;" alt="The original iReal Pro tune." />
    </a>
    <figcaption>The original iReal Pro tune.</figcaption>
  </figure>
</div>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/9.20-special-musescore.jpg">
      <img src="/assets/9.20-special-musescore.jpg" style="max-width: 50%;" alt="MuseScore's rendering of &lt;code&gt;ireal-musicxml&lt;/code&gt;'s output." />
    </a>
    <figcaption>MuseScore's rendering of <code>ireal-musicxml</code>'s output.</figcaption>
  </figure>
</div>

<h2 id="musicxml-to-midi-with-accompaniment">MusicXML to MIDI with accompaniment</h2>
<p>To support conversion of MusicXML to MIDI, I’ve created <a href="https://github.com/infojunkie/musicxml-midi"><code class="language-plaintext highlighter-rouge">musicxml-midi</code>, a library and API server</a> that supports the addition of auto-generated accompaniments via <a href="https://www.mellowood.ca/mma/">another open source tool</a> that I’ve adopted and enhanced. Here’s how the same tune above is played back with accompaniment:</p>

<div class="section">
  <midi-player src="/assets/9.20-special.mid" sound-font="" visualizer="#dummy"></midi-player>
  <figcaption>
    Playback courtesy of
    <a href="https://cifkao.github.io/html-midi-player/"><code>html-midi-player</code></a>.
  </figcaption>
</div>

<h2 id="groove-to-musicxml">Groove to MusicXML</h2>
<p>This library also includes <a href="https://github.com/infojunkie/musicxml-midi/blob/main/src/js/musicxml-grooves.js"><code class="language-plaintext highlighter-rouge">musicxml-grooves</code>, a tool to convert raw “grooves” (i.e. accompaniment patterns) into MusicXML sheets</a>. This is how the following MIDI groove is interpreted by MuseScore and by <code class="language-plaintext highlighter-rouge">musicxml-grooves</code>:</p>

<div class="section">
  <midi-player src="/assets/JazzBasieA.mid" sound-font="" visualizer="#dummy"></midi-player>
  <figcaption>
    Playback courtesy of
    <a href="https://cifkao.github.io/html-midi-player/"><code>html-midi-player</code></a>.
  </figcaption>
</div>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/JazzBasieA-musescore.jpg">
      <img src="/assets/JazzBasieA-musescore.jpg" style="max-width: 100%;" alt="The MIDI file as interpreted by MuseScore." />
    </a>
    <figcaption>The MIDI file as interpreted by MuseScore.</figcaption>
  </figure>
</div>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/JazzBasieA.jpg">
      <img src="/assets/JazzBasieA.jpg" style="max-width: 100%;" alt="The same pattern as interpreted by &lt;code&gt;musicxml-grooves&lt;/code&gt; (without post-editing). This version is more readable than the above because the converter tries hard to quantize the notes to a grid that includes triplets." />
    </a>
    <figcaption>The same pattern as interpreted by <code>musicxml-grooves</code> (without post-editing). This version is more readable than the above because the converter tries hard to quantize the notes to a grid that includes triplets.</figcaption>
  </figure>
</div>

<h2 id="musicxml-to-musescore">MusicXML to MuseScore</h2>
<p><a href="https://musescore.org">MuseScore</a> is one of the few serious open source music writing software, but it suffers from incomplete MusicXML import/export. I’ve recently started work on <a href="https://github.com/infojunkie/musicxml-mscx"><code class="language-plaintext highlighter-rouge">musicxml-mscx</code>, a new library to perform more robust MusicXML conversion to and from the native MuseScore format</a>.</p>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/tutorial-apres-un-reve.finale.jpg">
      <img src="/assets/tutorial-apres-un-reve.finale.jpg" style="max-width: 100%;" alt="The original score, converted to MusicXML by Finale." />
    </a>
    <figcaption>The original score, converted to MusicXML by Finale.</figcaption>
  </figure>
</div>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/tutorial-apres-un-reve.jpg">
      <img src="/assets/tutorial-apres-un-reve.jpg" style="max-width: 100%;" alt="&lt;code&gt;musicxml-mscx&lt;/code&gt;'s output to MuseScore format. Note that MuseScore does not support cross-staff beams at the logical level." />
    </a>
    <figcaption><code>musicxml-mscx</code>'s output to MuseScore format. Note that MuseScore does not support cross-staff beams at the logical level.</figcaption>
  </figure>
</div>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/tutorial-apres-un-reve.musescore.jpg">
      <img src="/assets/tutorial-apres-un-reve.musescore.jpg" style="max-width: 100%;" alt="MuseScore's own MusicXML importer. Can you spot the differences between the 3 displays?" />
    </a>
    <figcaption>MuseScore's own MusicXML importer. Can you spot the differences between the 3 displays?</figcaption>
  </figure>
</div>

<h2 id="putting-it-all-together-a-web-based-audio-player">Putting it all together: A Web-based audio player</h2>
<p>Once the music assets are produced, they are ready to be loaded in a Web application. For this purpose, I’ve created <a href="https://github.com/infojunkie/musicxml-player"><code class="language-plaintext highlighter-rouge">musicxml-player</code>, a Web component that loads MusicXML and MIDI files</a>, in order to synchronize the audio playback with the animation of the music sheet. It’s an ambitious component that packages several 3rd-party modules into a flexible foundation to build Web-based music applications. Here are 2 video captures from the demo app in the component’s repo:</p>

<div class="section">
  <div class="flex-center">
    <video controls="" width="100%">
      <source src="/assets/baiao.webm" type="video/webm" />
    </video>
  </div>
  <figcaption>A video capture of a looping rhythm.</figcaption>
</div>

<div class="section">
  <div class="flex-center">
    <video controls="" width="100%">
      <source src="/assets/salma-ya-salama.webm" type="video/webm" />
    </video>
  </div>
  <figcaption>A video capture of a score playback with auto-generated accompaniment.</figcaption>
</div>

<h2 id="the-challenges-and-rewards-of-this-project">The challenges and rewards of this project</h2>
<p>Writing this post, I realize I came a long way since that original manifesto in 2018… and that the road ahead is arbitrarily long. To remain motivated, I keep challenging myself to mini-projects that tickle my immediate fancy, and I do my best to fit them within the general framework of this ecosystem. I am constantly faced with new questions, from deeply philosophical ones to immediate programming problems:</p>

<ul>
  <li>What are musical tunings, from a mathematical point of view? Why are the frequencies of the notes the way they are?</li>
  <li>What are the commonalities and differences between Western scales, Arabic maqams, Indian ragas, and musical modes from other world cultures?</li>
  <li>How to represent the musics of different cultures in a single programming system, without completely diluting the former and keeping the latter manageable?</li>
  <li>How to extract from MIDI events a sequence of notes that is understandable and playable by humans?</li>
  <li>How to reliably schedule notes from a MIDI file to be played in real-time on a Web page?</li>
  <li>How to link the information in a MusicXML score to the audio events in a MIDI file?</li>
  <li>What the heck is XSL and how can I write data transformations with it??</li>
</ul>

<p>Answering these questions is the reason why I am still motivated to go on! Over the course of the years, I’ve encountered some truly inspiring projects that have expanded my musicological mind. Here are a few:</p>

<ul>
  <li>Gareth Loy’s <a href="http://www.musimathics.com/">“Musimathics: A Guided Tour of the Mathematics of Music”</a></li>
</ul>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/musimathics.jpg">
      <img src="/assets/musimathics.jpg" style="max-width: 100%;" alt="Musimathics blows my mind every time I pick it up 🤯" />
    </a>
    <figcaption>Musimathics blows my mind every time I pick it up 🤯</figcaption>
  </figure>
</div>

<ul>
  <li>Manuel Op de Coul’s <a href="https://www.huygens-fokker.org/scala/">Scala</a>, a mind-bogglingly comprehensive tool for exploring musical tunings.</li>
</ul>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/scala-keyboard.png">
      <img src="/assets/scala-keyboard.png" style="max-width: 100%;" alt="One of countless feature-rich functions of Scala." />
    </a>
    <figcaption>One of countless feature-rich functions of Scala.</figcaption>
  </figure>
</div>

<ul>
  <li>Chris Wilson’s <a href="https://web.dev/articles/audio-scheduling">A tale of two clocks</a>, the seminal article about robust Web audio sequencing.</li>
</ul>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/a-tale-of-two-clocks.png">
      <img src="/assets/a-tale-of-two-clocks.png" style="max-width: 100%;" alt="A wonderfully explanatory diagram that captures the essence of the technique." />
    </a>
    <figcaption>A wonderfully explanatory diagram that captures the essence of the technique.</figcaption>
  </figure>
</div>

<p>I’ve been fortunate to work with others who are interested in this domain: A year ago, I was sponsored to add a “horizontal scrolling” mode to the player, as well as a method to synchronize the playback with a YouTube video (hint: it uses the <a href="https://webtiming.github.io/timingobject/">Timing Object W3C draft specification</a>) - both of which went back into <code class="language-plaintext highlighter-rouge">musicxml-player</code>. Today, I am exploring adding multiplayer capability to the player, also using Web standards. I’m also fortunate to interact with like-minded developers, like <a href="https://media-codings.com/">Christoph Guttandin</a> who maintains a dizzying array of well-crafted audio modules - we collaborate on his excellent <a href="https://github.com/chrisguttandin/midi-player"><code class="language-plaintext highlighter-rouge">midi-player</code> component</a> which is a cornerstone of <code class="language-plaintext highlighter-rouge">musicxml-player</code>. Since the early days, I’ve been in touch with <a href="https://www.mellowood.ca">Bob van del Poel</a>, a fellow British Columbian who wrote the ridiculously great <a href="https://www.mellowood.ca/mma/">Musical MIDI Accompaniment (MMA)</a> system which is a cornerstone of <code class="language-plaintext highlighter-rouge">musicxml-midi</code>.</p>

<h2 id="looking-ahead-one-year">Looking ahead one year</h2>
<p>Here’s what I hope to work on within the next year:</p>

<ul>
  <li>
    <p>Embed playable music sheets into actual CMS systems, starting with my own <a href="https://musescore.com/user/55682/sets/2178286">Arabic Real Book sheets</a> - <a href="https://github.com/infojunkie/musicxml-player/issues/41">GitHub issue here</a>.</p>
  </li>
  <li>
    <p>Reach a milestone with <code class="language-plaintext highlighter-rouge">musicxml-mscx</code> to convert full music scores from MusicXML to MuseScore format - focusing on correctly handling the bugs in MuseScore’s own MusicXML import.</p>
  </li>
  <li>
    <p>Explore the feasibility of using pre-rendered scores in <code class="language-plaintext highlighter-rouge">musicxml-player</code> to replace resource-intensive JavaScript notation engines - <a href="https://github.com/infojunkie/musicxml-player/issues/38">GitHub issue here</a>.</p>
  </li>
  <li>
    <p>Replace my simplistic MIDI soft-synth in <code class="language-plaintext highlighter-rouge">musicxml-player</code> with a more complete one such as SpessaSynth - <a href="https://github.com/infojunkie/musicxml-player/issues/39">GitHub issue here</a>.</p>
  </li>
  <li>
    <p>Explore multiplayer playback in <code class="language-plaintext highlighter-rouge">musicxml-player</code> - <a href="https://github.com/infojunkie/musicxml-player/issues/40">GitHub issue here</a>.</p>
  </li>
  <li>
    <p>Support microtonality in MusicXML to MIDI conversion - <a href="https://github.com/infojunkie/musicxml-midi/issues/45">GitHub issue here</a>.</p>
  </li>
  <li>
    <p>Expand the groove conversion algorithm in <code class="language-plaintext highlighter-rouge">musicxml-grooves</code> to handle full MIDI files - <a href="https://github.com/infojunkie/musicxml-midi/issues/53">GitHub issue here</a>.</p>
  </li>
</ul>

<p>I hope to continue working on this project for a long time to come, and I welcome any and all contributions! :handshake:</p>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="music" /><summary type="html"><![CDATA[In this post, I present a summary of the music ecosystem I've been working on for the past 7 years.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.karimratib.me/assets/music-workflow.png" /><media:content medium="image" url="https://blog.karimratib.me/assets/music-workflow.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Drupal 9/10: Fix Views Reset button with Big Pipe</title><link href="https://blog.karimratib.me/2024/08/29/drupal-bigpipe-reset.html" rel="alternate" type="text/html" title="Drupal 9/10: Fix Views Reset button with Big Pipe" /><published>2024-08-29T00:00:00-07:00</published><updated>2024-08-29T00:00:00-07:00</updated><id>https://blog.karimratib.me/2024/08/29/drupal-bigpipe-reset</id><content type="html" xml:base="https://blog.karimratib.me/2024/08/29/drupal-bigpipe-reset.html"><![CDATA[<p>I was <strong>flabbergasted</strong> to discover that Big Pipe breaks the Views Reset button. In fact, Big Pipe breaks <strong>all</strong> form redirects. Not sure how other Drupal devs feel about that, but this was a big smh moment for me. Just imagine the collective time wasted debugging one’s code until one associates this failure to a core module bug!! :facepalm:</p>

<p>Now that my rant’s over, let’s get into the technical details of this story.</p>

<h2 id="detecting-the-bug">Detecting the bug</h2>
<p>The tell-tale sign that you hit this bug is when you enable the Reset button on a view’s exposed form, and instead of resetting the view filters, you get a blank page. The log says something like:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Drupal\Core\Form\EnforcedResponseException: in Drupal\Core\Form\FormBuilder-&gt;buildForm() (line 357 of /var/www/html/web/core/lib/Drupal/Core/Form/FormBuilder.php)
#0 /var/www/html/web/core/modules/views/src/Plugin/views/exposed_form/ExposedFormPluginBase.php(134): Drupal\Core\Form\FormBuilder-&gt;buildForm()
#1 /var/www/html/web/core/modules/views/src/ViewExecutable.php(1243): Drupal\views\Plugin\views\exposed_form\ExposedFormPluginBase-&gt;renderExposedForm()
</code></pre></div></div>

<h2 id="solution-1-applying-the-patch">Solution 1: Applying the patch</h2>
<p>The <a href="https://www.drupal.org/project/drupal/issues/3304746">relevant bug report</a> has a patch that worked for me. I had to apply the patch manually to Drupal 9.x (please, don’t shoot me because I’m not in charge of our Drupal update schedule!!) but the code changes are exactly the same.</p>

<p>When you apply this patch, the Reset button works again. But clumsily: First, you see the URL changing to your current filters followed by <code class="language-plaintext highlighter-rouge">&amp;op=Reset</code>, then the browser redirects to the page’s bare URL, thereby resetting the filters. This is of course a consequence of using Big Pipe, which optimizes page rendering by returning all cached blocks first, and deferring uncacheable blocks to be requested by the front-end. A marvel of engineering by <strong>Wim Leers</strong>! Still, the flickering leaves to be desired.</p>

<p>In my case, this particular view is the principal component of the page, so I feel OK disabling Big Pipe for just this page if at all possible. But how?</p>

<h2 id="solution-2a-disable-big-pipe-for-a-specific-route">Solution 2a: Disable Big Pipe for a specific route</h2>
<p>The standard approach to disabling Big Pipe is to inject the setting <code class="language-plaintext highlighter-rouge">_no_big_pipe: TRUE</code> in the options of the relevant route. If your page’s route is unique, then all you need is to follow the official guide on <a href="https://www.drupal.org/docs/drupal-apis/routing-system/altering-existing-routes-and-adding-new-routes-based-on-dynamic-ones#s-altering-existing-routes">altering existing routes</a>. Specifically, for a view page, the route is of the form <code class="language-plaintext highlighter-rouge">view.view_id.page_id</code>. So you would have something like the following:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">protected</span> <span class="k">function</span> <span class="n">alterRoutes</span><span class="p">(</span><span class="kt">RouteCollection</span> <span class="nv">$collection</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// Disable Big Pipe for my view.</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$route</span> <span class="o">=</span> <span class="nv">$collection</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'view.view_id.page_id'</span><span class="p">))</span> <span class="p">{</span>
      <span class="nv">$route</span><span class="o">-&gt;</span><span class="nf">setOption</span><span class="p">(</span><span class="s1">'_no_big_pipe'</span><span class="p">,</span> <span class="kc">TRUE</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="p">}</span>
</code></pre></div></div>

<p>But in my case, the view is a block that’s embedded in a node page. I cannot simply alter the route <code class="language-plaintext highlighter-rouge">entity.node.canonical</code>, because this would disable it on 99% of the site!!</p>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/disable-bigpipe.jpg">
      <img src="/assets/disable-bigpipe.jpg" style="max-width: 100%;" alt="What do you mean, my memes are obsolete??" />
    </a>
    <figcaption>What do you mean, my memes are obsolete??</figcaption>
  </figure>
</div>

<h1 id="solution-2b-disable-big-pipe-for-a-specific-url">Solution 2b: Disable Big Pipe for a specific URL</h1>
<p>I turned to good old <a href="https://drupal.stackexchange.com/q/320680/767">Stack Overflow (technically, Drupal Answers)</a> to query the hive-mind. Thanks to the ever-helpful and super-knowledgeable <strong>4uk4</strong> for his suggestion! Although I ended up taking a different approach, I will remember that I can override parameterized routes with specific ones because this will surely come in handy in the future.</p>

<p>The approach I ended up following is based on Wim Leer’s <a href="https://git.drupalcode.org/project/big_pipe_demo">Big Pipe Strategy demo</a>, where he catches every request in real-time and decides whether to return the Big Pipe placeholders or to ignore them. In my case, instead of examining the request’s query arguments for a specific “disable” signal, I compare the URI itself with the target page’s URL:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">public</span> <span class="k">function</span> <span class="n">processPlaceholders</span><span class="p">(</span><span class="kt">array</span> <span class="nv">$placeholders</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// Ignore Big Pipe for my page URL.</span>
    <span class="nv">$current_uri</span> <span class="o">=</span> <span class="nc">\Drupal</span><span class="o">::</span><span class="nf">request</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getRequestUri</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="nf">str_starts_with</span><span class="p">(</span><span class="nv">$current_uri</span><span class="p">,</span> <span class="s1">'/path/to/page-to-ignore'</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">[];</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">bigPipeStrategy</span><span class="o">-&gt;</span><span class="nf">processPlaceholders</span><span class="p">(</span><span class="nv">$placeholders</span><span class="p">);</span>
  <span class="p">}</span>
</code></pre></div></div>
<p>Et voilà ! Another bug bites the dust.</p>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[Big Pipe on Drupal 9+ breaks form redirects. In this post, I explain how I fixed it for a specific but common case.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.karimratib.me/assets/disable-bigpipe.jpg" /><media:content medium="image" url="https://blog.karimratib.me/assets/disable-bigpipe.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Drupal 10: From cookies to user sessions</title><link href="https://blog.karimratib.me/2024/08/20/drupal-sessions.html" rel="alternate" type="text/html" title="Drupal 10: From cookies to user sessions" /><published>2024-08-20T00:00:00-07:00</published><updated>2024-08-20T00:00:00-07:00</updated><id>https://blog.karimratib.me/2024/08/20/drupal-sessions</id><content type="html" xml:base="https://blog.karimratib.me/2024/08/20/drupal-sessions.html"><![CDATA[<p>When you need to examine user session tokens, you know you’re deep in the bowels of the CMS. That’s what happened to me recently, as I was debugging why CloudFlare was mixing up user sessions and giving admin access to otherwise unpermissioned users :scream:</p>

<p>To help debug this, I needed a way to associate user cookies with entries from the <code class="language-plaintext highlighter-rouge">sessions</code> table. I wrote a drush script to do exactly that: Given the value of the SESSXXX cookie in your browser, the script will find the corresponding <code class="language-plaintext highlighter-rouge">sessions</code> entry and dump its information, decoding the session metadata in the process:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>drush scr export_sessions.php <span class="nt">--</span> <span class="nt">--cookie</span><span class="o">=</span>5XvW3NGG8q1PcCrEXn676THvQBitaUwDiPw8XzAgXtihV43u
</code></pre></div></div>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"uid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-Xcm0ar3mWcMhIhhBANA3K-jUx3JNOsu190LPEUzIN8"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"hostname"</span><span class="p">:</span><span class="w"> </span><span class="s2">"172.24.0.1"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"timestamp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1724179990"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"session"</span><span class="p">:</span><span class="w"> </span><span class="s2">"_sf2_attributes|a:1:{s:3:</span><span class="se">\"</span><span class="s2">uid</span><span class="se">\"</span><span class="s2">;s:1:</span><span class="se">\"</span><span class="s2">1</span><span class="se">\"</span><span class="s2">;}_sf2_meta|a:4:{s:1:</span><span class="se">\"</span><span class="s2">u</span><span class="se">\"</span><span class="s2">;i:1724179990;s:1:</span><span class="se">\"</span><span class="s2">c</span><span class="se">\"</span><span class="s2">;i:1723574737;s:1:</span><span class="se">\"</span><span class="s2">l</span><span class="se">\"</span><span class="s2">;i:2000000;s:1:</span><span class="se">\"</span><span class="s2">s</span><span class="se">\"</span><span class="s2">;s:43:</span><span class="se">\"</span><span class="s2">OCpNT7IvSsWNfPeYXam7E7XFPTKqb-8qWPUTMe8MFlQ</span><span class="se">\"</span><span class="s2">;}"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"sf2"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"attributes"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"uid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"meta"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"u"</span><span class="p">:</span><span class="w"> </span><span class="mi">1724179990</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"c"</span><span class="p">:</span><span class="w"> </span><span class="mi">1723574737</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"l"</span><span class="p">:</span><span class="w"> </span><span class="mi">2000000</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"s"</span><span class="p">:</span><span class="w"> </span><span class="s2">"OCpNT7IvSsWNfPeYXam7E7XFPTKqb-8qWPUTMe8MFlQ"</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>The same script will dump ALL sessions if you don’t pass in a cookie value. Here’s the source code of <code class="language-plaintext highlighter-rouge">export_sessions.php</code>:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="cd">/**
 * Retrieve session entry for given cookie.
 * Based on https://drupal.stackexchange.com/a/231726/767
 */</span>

<span class="kn">use</span> <span class="nc">Drupal\Component\Utility\Crypt</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$extra</span><span class="p">))</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nf">str_starts_with</span><span class="p">(</span><span class="nv">$extra</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s1">'--cookie='</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">die</span><span class="p">(</span><span class="s2">"Usage: drush scr export_sessions.php [-- --cookie=&lt;value of SESSxxxx cookie&gt;]</span><span class="se">\n</span><span class="s2">"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span>
    <span class="nv">$cookie</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="s1">'--cookie='</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="nv">$extra</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
    <span class="nv">$cookie</span> <span class="o">=</span> <span class="nb">urldecode</span><span class="p">(</span><span class="nv">$cookie</span><span class="p">);</span>
    <span class="nv">$sid</span> <span class="o">=</span> <span class="nc">Crypt</span><span class="o">::</span><span class="nf">hashBase64</span><span class="p">(</span><span class="nv">$cookie</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$connection</span> <span class="o">=</span> <span class="nc">\Drupal</span><span class="o">::</span><span class="nf">database</span><span class="p">();</span>
<span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$sid</span><span class="p">))</span> <span class="p">{</span>
  <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="nf">query</span><span class="p">(</span><span class="s1">'SELECT * FROM {sessions} WHERE sid = :sid'</span><span class="p">,</span> <span class="p">[</span><span class="s1">':sid'</span> <span class="o">=&gt;</span> <span class="nv">$sid</span><span class="p">]);</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
  <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="nf">query</span><span class="p">(</span><span class="s1">'SELECT * FROM {sessions}'</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nb">array_map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$session</span><span class="p">)</span> <span class="p">{</span>
  <span class="nb">preg_match_all</span><span class="p">(</span><span class="s1">'/_sf2_(\w+)\|/'</span><span class="p">,</span> <span class="nv">$session</span><span class="o">-&gt;</span><span class="n">session</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">,</span> <span class="no">PREG_OFFSET_CAPTURE</span> <span class="o">|</span> <span class="no">PREG_SET_ORDER</span><span class="p">);</span>
  <span class="nv">$session</span><span class="o">-&gt;</span><span class="n">sf2</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$match</span><span class="p">,</span> <span class="nv">$index</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$session</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$offset</span> <span class="o">=</span> <span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nv">$length</span> <span class="o">=</span> <span class="nv">$index</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matches</span><span class="p">)</span> <span class="o">?</span>
      <span class="nv">$matches</span><span class="p">[</span><span class="nv">$index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$offset</span><span class="o">:</span>
      <span class="nb">strlen</span><span class="p">(</span><span class="nv">$session</span><span class="o">-&gt;</span><span class="n">session</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
    <span class="k">return</span> <span class="p">[</span>
      <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="nv">$match</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span>
      <span class="s1">'value'</span> <span class="o">=&gt;</span> <span class="nb">unserialize</span><span class="p">(</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$session</span><span class="o">-&gt;</span><span class="n">session</span><span class="p">,</span> <span class="nv">$offset</span><span class="p">,</span> <span class="nv">$length</span><span class="p">)),</span>
    <span class="p">];</span>
  <span class="p">},</span> <span class="nv">$matches</span><span class="p">,</span> <span class="nb">array_keys</span><span class="p">(</span><span class="nv">$matches</span><span class="p">));</span>
  <span class="k">return</span> <span class="nv">$session</span><span class="p">;</span>
<span class="p">},</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="nf">fetchAll</span><span class="p">()),</span> <span class="no">JSON_PRETTY_PRINT</span><span class="p">)</span> <span class="mf">.</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span>
</code></pre></div></div>
<p>That’s it. Short and sweet! :candy:</p>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[In this post, I show a script that relates user cookies to Drupal session information.]]></summary></entry><entry><title type="html">Drupal 9: Troubleshooting Cache API issues, Part 1: Xdebug, wodby/drupal, VS Code</title><link href="https://blog.karimratib.me/2023/10/25/xdebug.html" rel="alternate" type="text/html" title="Drupal 9: Troubleshooting Cache API issues, Part 1: Xdebug, wodby/drupal, VS Code" /><published>2023-10-25T00:00:00-07:00</published><updated>2023-10-25T00:00:00-07:00</updated><id>https://blog.karimratib.me/2023/10/25/xdebug</id><content type="html" xml:base="https://blog.karimratib.me/2023/10/25/xdebug.html"><![CDATA[<p>In my 30+ years of programming, my go-to debugging tool has been the judicious usage of <code class="language-plaintext highlighter-rouge">print</code> commands on the appropriate variables at the appropriate times. Of course, <code class="language-plaintext highlighter-rouge">print</code> takes many different forms depending on the technology stack and the application model, but the principle remains the same. In very few cases did this approach fail me, and I stumbled across one such case as I was debugging the notoriously tricky Drupal <a href="https://www.drupal.org/docs/8/api/cache-api/cache-api">Cache API</a>. In a nutshell, there was one module, among the dozens of core, contrib and custom modules making up that particular site, that was invalidating the static page cache and preventing pages from being cached. I wanted to find which module was the culprit.</p>

<p>The problem with this issue is that the Cache API is called thousands of times per request - for pretty much every theming function participating in a page render. Further, the caching logic is complex as it involves combinations of cache tags, <code class="language-plaintext highlighter-rouge">max-age</code> settings, and various other mechanisms that affect the decisions of which caching tables to use and which caching headers to return in the HTTP response.</p>

<p>Trying to pinpoint the particular condition that caused the cache invalidation in this case using <code class="language-plaintext highlighter-rouge">print</code> statements would have been an inefficient and tedious process, and the client wouldn’t have liked to pay for that inefficiency. Kind of like the game of 20 questions, but with incomplete information and many, many decision branches. So I decided to bite the bullet and set up my Xdebug environment to catch the bug red-handed, so to speak. With its pants down, so to speak. To catch it in the act, so to speak.</p>

<p>Here’s a high level diagram of the various components at play here. I slightly modified it from the original at <a href="https://blog.devsense.com/2019/debugging-php-on-docker-with-visual-studio-code">this other tutorial on the same topic</a>.</p>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/xdebug.png">
      <img src="/assets/xdebug.png" style="max-width: 100%;" alt="Xdebug within php-fpm container communicates with VS Code IDE on host via port 9003." />
    </a>
    <figcaption>Xdebug within php-fpm container communicates with VS Code IDE on host via port 9003.</figcaption>
  </figure>
</div>

<p>My development environment is made up of the excellent <a href="https://github.com/wodby/docker4drupal">Docker-based Drupal stack</a> by Wodby. I can’t say enough good things about this framework, which has allowed me to start new Drupal projects, and even adopt legacy ones, on a solid footing without breaking a sweat. The architecture is simple, documentation is clear, customization is easy. I’ve been able to share development environments with team members using macOS and Windows systems with minimal changes.</p>

<p>The <a href="https://github.com/wodby/drupal-php">wodby/drupal-php</a> image comes loaded with the Xdebug extension, and it’s “only” necessary to configure the right environment variables to activate it. I say “only” because many of the settings are non-obvious and required some experimentation before I could get them running, in addition to a VS Code configuration to match.</p>

<p>Here’s my current setup, in the main <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file running the full Drupal stack:</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="na">php</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">wodby/drupal-php:$PHP_TAG</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">PHP_EXTENSIONS_DISABLE</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span> <span class="c1"># or any value that does NOT include xdebug</span>
      <span class="na">PHP_XDEBUG</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">PHP_XDEBUG_MODE</span><span class="pi">:</span> <span class="s">debug</span>
      <span class="na">PHP_XDEBUG_START_WITH_REQUEST</span><span class="pi">:</span> <span class="s">yes</span>
      <span class="na">PHP_XDEBUG_CLIENT_HOST</span><span class="pi">:</span> <span class="s">host.docker.internal</span>
      <span class="na">PHP_XDEBUG_LOG</span><span class="pi">:</span> <span class="s">/tmp/php-xdebug.log</span>
    <span class="na">extra_hosts</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">host.docker.internal:host-gateway"</span>
</code></pre></div></div>
<p>Here’s what the non-obvious settings mean:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">PHP_EXTENSIONS_DISABLE: ''</code> prevents the PHP container from disabling the <code class="language-plaintext highlighter-rouge">xdebug</code> extension - which for some reason is the default in <a href="https://github.com/wodby/php?tab=readme-ov-file#php-extensions"><code class="language-plaintext highlighter-rouge">wodby/php</code></a>.</li>
  <li><code class="language-plaintext highlighter-rouge">PHP_XDEBUG_MODE: debug</code> enables <a href="https://xdebug.org/docs/step_debug#configure">Xdebug step debugging</a>, which is our purpose here.</li>
  <li><code class="language-plaintext highlighter-rouge">PHP_XDEBUG_START_WITH_REQUEST: yes</code> means that Xdebug is activated at every request, automatically.</li>
  <li><code class="language-plaintext highlighter-rouge">PHP_XDEBUG_CLIENT_HOST: host.docker.internal</code> is the all-important address of the machine running the debugging client - in my case, VS Code on my local machine. <a href="https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host">According to documentation</a>, the name <code class="language-plaintext highlighter-rouge">host.docker.internal</code> is automatically available in Docker 18.03+ Mac/Win, <strong>but not on Linux</strong>. For Linux, we add the stanza <code class="language-plaintext highlighter-rouge">extra_hosts: "host.docker.internal:host-gateway"</code> which maps that domain name to Docker’s gateway IP, which is the Docker host, which is my laptop OS running VS Code :sweat_smile:</li>
</ul>

<p>But that’s only half of the story. The other half is convincing VS Code to act as a debugging client to Xdebug. To do that, we use the <a href="https://marketplace.visualstudio.com/items?itemName=xdebug.php-debug">PHP Debug VS Code extension</a> and we <a href="https://code.visualstudio.com/docs/editor/debugging#_launch-configurations">customize the Launch configurations</a> to add the Xdebug endpoint. Basically, we create a <code class="language-plaintext highlighter-rouge">.vscode/launch.json</code> file in the project root with the following content:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.2.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
   </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Listen for Xdebug"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"php"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="s2">"launch"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">9003</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pathMappings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"/var/www/html/"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/src"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>Here’s what the non-obvious settings mean:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">"port": 9003</code> is the default port that Xdebug hits on the client, and that’s where VS Code should be listening for debug events.</li>
  <li><code class="language-plaintext highlighter-rouge">"pathMappings": { "/var/www/html/": "${workspaceFolder}/src" }</code> maps the Docker filesystem path <code class="language-plaintext highlighter-rouge">/var/www/html</code> where the app resides to the actual host path <code class="language-plaintext highlighter-rouge">"${workspaceFolder}/src"</code> where <code class="language-plaintext highlighter-rouge">${workspaceFolder}</code> is a <a href="https://code.visualstudio.com/docs/editor/variables-reference">VS Code variable</a>.</li>
</ul>

<p>With these in place, it should be now possible to place a breakpoint in, say, <code class="language-plaintext highlighter-rouge">src/web/index.php</code> (the Drupal main entrypoint) and catch every request! Select <strong>Run &gt; Start Debugging</strong> or or click the <strong>Listen for Xdebug</strong> configuration in the bottom status bar. We are finally ready to start debugging the Drupal Cache API :ghost:</p>

<h2 id="troubleshooting">Troubleshooting</h2>
<p>Of course, this setup didn’t come by without many failures and much head-scratching, perhaps even some teeth-clenching. If your 100% guaranteed breakpoint (like one in <code class="language-plaintext highlighter-rouge">src/web/index.php</code>) is not being hit, then it’s time to put on your sleuthing hat :detective:</p>

<p>Check that the Xdebug log is active and connected. Running <code class="language-plaintext highlighter-rouge">docker-compose exec php tail -f /tmp/php-xdebug.log</code> should show messages like:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[112] Log opened at 2023-10-25 06:42:12.885888
[112] [Step Debug] INFO: Connecting to configured address/port: host.docker.internal:9003.
[112] [Step Debug] INFO: Connected to debugging client: host.docker.internal:9003 (through xdebug.client_host/xdebug.client_port). :-)
</code></pre></div></div>
<p>Yes, that final smiley is part of the log :-)</p>

<p>If instead, you see a message like:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tail: can't open '/tmp/php-xdebug.log': No such file or directory
tail: no files
</code></pre></div></div>
<p>Then the Xdebug extension is not active, which could mean <code class="language-plaintext highlighter-rouge">PHP_EXTENSIONS_DISABLE</code> is still set to include <code class="language-plaintext highlighter-rouge">xdebug</code>.</p>

<p>If you see a sad smiley message like:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[112] [Step Debug] ERR: Could not connect to debugging client. Tried: host.docker.internal:9003 (through xdebug.client_host/xdebug.client_port) :-(
</code></pre></div></div>
<p>Then check that a connection can be established between Xdebug and VS Code. Running <code class="language-plaintext highlighter-rouge">docker-compose exec php nc -zv host.docker.internal 9003</code> should return a successful response like:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>host.docker.internal (172.17.0.1:9003) open
</code></pre></div></div>
<p>Anything else is a sign that the Docker container is unable to connect to the host on port 9003. Check your <code class="language-plaintext highlighter-rouge">host.docker.internal</code> name resolution, check the <code class="language-plaintext highlighter-rouge">launch.json</code> port setting, turn it off and on again, talk to your rubber duck - you know the drill!</p>

<h2 id="appendix-annoying-drush-warnings">Appendix: Annoying drush warnings</h2>
<p>With Xdebug activated, you may be bombarded with multiple lines of warnings when running <code class="language-plaintext highlighter-rouge">drush</code> commands, especially when you are not debugging on the IDE side:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[20-Aug-2024 19:10:28 UTC] Xdebug: [Log Files] File '/tmp/php-xdebug.log' could not be opened.
[20-Aug-2024 19:10:28 UTC] Xdebug: [Step Debug] Could not connect to debugging client. Tried: host.docker.internal:9003 (through xdebug.client_host/xdebug.client_port).
</code></pre></div></div>
<p>In this case, you can run <code class="language-plaintext highlighter-rouge">export XDEBUG_MODE=off</code> in the <code class="language-plaintext highlighter-rouge">bash</code> session where you’re running <code class="language-plaintext highlighter-rouge">drush</code>, thereby deactivating Xdebug in the session, and saving a few bits from your eyes :sob:</p>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[In this post, I explain how to configure Xdebug with VS Code in the context of deep Drupal debugging.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.karimratib.me/assets/xdebug.png" /><media:content medium="image" url="https://blog.karimratib.me/assets/xdebug.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Drupal 9: Backup and Migrate - Drush 11 support</title><link href="https://blog.karimratib.me/2023/06/01/backup-migrate-drush.html" rel="alternate" type="text/html" title="Drupal 9: Backup and Migrate - Drush 11 support" /><published>2023-06-01T00:00:00-07:00</published><updated>2023-06-01T00:00:00-07:00</updated><id>https://blog.karimratib.me/2023/06/01/backup-migrate-drush</id><content type="html" xml:base="https://blog.karimratib.me/2023/06/01/backup-migrate-drush.html"><![CDATA[<p>Supporting content migrations across stages is a tricky subject, and most tools I reviewed seemed too fragile or too complex to be delivered to a client. We opted to use a simple workflow based on <a href="https://www.drupal.org/project/backup_migrate">BAM (Backup and Migrate)</a> coupled with config re-synchronization. To help automate the process, I wrote a set of <code class="language-plaintext highlighter-rouge">drush</code> commands that implement BAM backup and restore. It’s been tested extensively, but only with a specific set of sources and destinations, so I am reproducing the current code here until it gets published as a module. One design decision I made was to produce output as JSON, to make it easier for downstream automation.</p>

<p>The typical usage scenario is the following:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>drush bamb default_db private_files
// <span class="o">=&gt;</span> <span class="o">{</span>
//    <span class="s2">"status"</span>: <span class="s2">"success"</span>,
//    <span class="s2">"message"</span>: <span class="s2">"Backup complete."</span>
//<span class="o">}</span>
<span class="nv">$ </span>drush bamls <span class="nt">--files</span><span class="o">=</span>private_files
// <span class="o">=&gt;</span> <span class="o">{</span>
//    <span class="s2">"sources"</span>: <span class="o">[</span>
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"default_db"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"Default Drupal Database"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"DefaultDB"</span>
//        <span class="o">}</span>,
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"entire_site"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"Entire Site (do not use)"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"EntireSite"</span>
//        <span class="o">}</span>,
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"private_files"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"Private Files Directory"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"DrupalFiles"</span>
//        <span class="o">}</span>,
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"public_files"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"Public Files Directory"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"DrupalFiles"</span>
//        <span class="o">}</span>,
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"ssot_database"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"SSoT Database"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"PostgreSQL"</span>
//        <span class="o">}</span>
//    <span class="o">]</span>,
//    <span class="s2">"destinations"</span>: <span class="o">[</span>
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"private_files"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"Private Files Directory"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"Directory"</span>
//        <span class="o">}</span>,
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"s3_bucket"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"S3 Bucket"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"awss3"</span>
//        <span class="o">}</span>
//    <span class="o">]</span>,
//    <span class="s2">"files"</span>: <span class="o">{</span>
//        <span class="s2">"private_files"</span>: <span class="o">[</span>
//            <span class="o">{</span>
//                <span class="s2">"id"</span>: <span class="s2">"backup-2023-01-27T15-44-19.sql.gz"</span>,
//                <span class="s2">"filename"</span>: <span class="s2">"prod-2023-01-27T15-44-19.sql.gz"</span>,
//                <span class="s2">"filesize"</span>: 19499222,
//                <span class="s2">"datestamp"</span>: 1674869134
//            <span class="o">}</span>
//        <span class="o">]</span>
//    <span class="o">}</span>
//<span class="o">}</span>
<span class="nv">$ </span>drush bamr default_db private_files backup-2023-01-27T15-44-19.sql.gz
// <span class="o">=&gt;</span> <span class="o">{</span>
//    <span class="s2">"status"</span>: <span class="s2">"success"</span>,
//    <span class="s2">"message"</span>: <span class="s2">"Restore complete."</span>
//<span class="o">}</span>
</code></pre></div></div>

<p>And here’s the source for the command:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">namespace</span> <span class="nn">Drush\Commands</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Drush\Drush</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Drush\Commands\DrushCommands</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Drush\Boot\DrupalBootLevels</span><span class="p">;</span>
<span class="kn">use</span> <span class="nf">Drupal\backup_migrate</span><span class="nc">\Core\Destination\ListableDestinationInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Console\Input\InputOption</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">BackupMigrateCommands</span> <span class="kd">extends</span> <span class="nc">DrushCommands</span>
<span class="p">{</span>
    <span class="cd">/**
     * List sources and destinations.
     *
     * @command backup_migrate:list
     * @aliases bamls
     *
     * @option sources Flag to list sources (default: yes, use --no-sources to hide)
     * @option destinations Flag to list destinations (default: yes, use --no-destinations to hide)
     * @option files Flag to list files for a comma-separated list of destination identifiers (default: none)
     *
     * @param options
     *
     * @return string JSON listing of sources, destinations, files
     *
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">list</span><span class="p">(</span><span class="kt">array</span> <span class="nv">$options</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">'sources'</span> <span class="o">=&gt;</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s1">'destinations'</span> <span class="o">=&gt;</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s1">'files'</span> <span class="o">=&gt;</span> <span class="nc">InputOption</span><span class="o">::</span><span class="no">VALUE_REQUIRED</span><span class="p">,</span>
    <span class="p">])</span><span class="o">:</span> <span class="n">string</span> <span class="p">{</span>
        <span class="nc">Drush</span><span class="o">::</span><span class="nf">bootstrapManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">doBootstrap</span><span class="p">(</span><span class="nc">DrupalBootLevels</span><span class="o">::</span><span class="no">FULL</span><span class="p">);</span>
        <span class="nv">$bam</span> <span class="o">=</span> <span class="nf">\backup_migrate_get_service_object</span><span class="p">();</span>
        <span class="nv">$output</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$options</span><span class="p">[</span><span class="s1">'sources'</span><span class="p">])</span> <span class="p">{</span>
            <span class="nv">$output</span><span class="p">[</span><span class="s1">'sources'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">array_reduce</span><span class="p">(</span><span class="nb">array_keys</span><span class="p">(</span><span class="nv">$bam</span><span class="o">-&gt;</span><span class="nf">sources</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getAll</span><span class="p">()),</span> <span class="k">function</span><span class="p">(</span><span class="nv">$sources</span><span class="p">,</span> <span class="nv">$source_id</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$source</span> <span class="o">=</span> <span class="nc">\Drupal</span><span class="o">::</span><span class="nf">entityTypeManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getStorage</span><span class="p">(</span><span class="s1">'backup_migrate_source'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">load</span><span class="p">(</span><span class="nv">$source_id</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nv">$source</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$sources</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span>
                        <span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="nv">$source_id</span><span class="p">,</span>
                        <span class="s1">'label'</span> <span class="o">=&gt;</span> <span class="nv">$source</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'label'</span><span class="p">),</span>
                        <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="nv">$source</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'type'</span><span class="p">),</span>
                    <span class="p">];</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="nv">$sources</span><span class="p">;</span>
            <span class="p">},</span> <span class="p">[]);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$options</span><span class="p">[</span><span class="s1">'destinations'</span><span class="p">])</span> <span class="p">{</span>
            <span class="nv">$output</span><span class="p">[</span><span class="s1">'destinations'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">array_reduce</span><span class="p">(</span><span class="nb">array_keys</span><span class="p">(</span><span class="nv">$bam</span><span class="o">-&gt;</span><span class="nf">destinations</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getAll</span><span class="p">()),</span> <span class="k">function</span><span class="p">(</span><span class="nv">$destinations</span><span class="p">,</span> <span class="nv">$destination_id</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$destination</span> <span class="o">=</span> <span class="nc">\Drupal</span><span class="o">::</span><span class="nf">entityTypeManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getStorage</span><span class="p">(</span><span class="s1">'backup_migrate_destination'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">load</span><span class="p">(</span><span class="nv">$destination_id</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nv">$destination</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$destinations</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span>
                        <span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="nv">$destination_id</span><span class="p">,</span>
                        <span class="s1">'label'</span> <span class="o">=&gt;</span> <span class="nv">$destination</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'label'</span><span class="p">),</span>
                        <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="nv">$destination</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'type'</span><span class="p">),</span>
                    <span class="p">];</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="nv">$destinations</span><span class="p">;</span>
            <span class="p">},</span> <span class="p">[]);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$options</span><span class="p">[</span><span class="s1">'files'</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">foreach</span><span class="p">(</span><span class="nb">array_map</span><span class="p">(</span><span class="s1">'trim'</span><span class="p">,</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">','</span><span class="p">,</span> <span class="nv">$options</span><span class="p">[</span><span class="s1">'files'</span><span class="p">]))</span> <span class="k">as</span> <span class="nv">$destination_id</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$destination</span> <span class="o">=</span> <span class="nv">$bam</span><span class="o">-&gt;</span><span class="nf">destinations</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="nv">$destination_id</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$destination</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">logger</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">warning</span><span class="p">(</span><span class="nf">dt</span><span class="p">(</span><span class="s1">'The destination !id does not exist.'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'!id'</span> <span class="o">=&gt;</span> <span class="nv">$destination_id</span><span class="p">]));</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$destination</span> <span class="k">instanceof</span> <span class="nc">ListableDestinationInterface</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">logger</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">warning</span><span class="p">(</span><span class="nf">dt</span><span class="p">(</span><span class="s1">'The destination !id is not listable.'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'!id'</span> <span class="o">=&gt;</span> <span class="nv">$destination_id</span><span class="p">]));</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">try</span> <span class="p">{</span>
                    <span class="nv">$files</span> <span class="o">=</span> <span class="nv">$destination</span><span class="o">-&gt;</span><span class="nf">listFiles</span><span class="p">();</span>
                    <span class="nv">$output</span><span class="p">[</span><span class="s1">'files'</span><span class="p">][</span><span class="nv">$destination_id</span><span class="p">]</span> <span class="o">=</span> <span class="nb">array_reduce</span><span class="p">(</span><span class="nb">array_keys</span><span class="p">(</span><span class="nv">$files</span><span class="p">),</span> <span class="k">function</span><span class="p">(</span><span class="nv">$files_info</span><span class="p">,</span> <span class="nv">$file_id</span><span class="p">)</span> <span class="k">use</span><span class="p">(</span><span class="nv">$files</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nv">$files_info</span><span class="p">[]</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">([</span>
                            <span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="nv">$file_id</span><span class="p">,</span>
                            <span class="s1">'filename'</span> <span class="o">=&gt;</span> <span class="nv">$files</span><span class="p">[</span><span class="nv">$file_id</span><span class="p">]</span><span class="o">-&gt;</span><span class="nf">getFullName</span><span class="p">(),</span>
                        <span class="p">],</span> <span class="nv">$files</span><span class="p">[</span><span class="nv">$file_id</span><span class="p">]</span><span class="o">-&gt;</span><span class="nf">getMetaAll</span><span class="p">());</span>
                        <span class="k">return</span> <span class="nv">$files_info</span><span class="p">;</span>
                    <span class="p">},</span> <span class="p">[]);</span>
                    <span class="nb">usort</span><span class="p">(</span><span class="nv">$output</span><span class="p">[</span><span class="s1">'files'</span><span class="p">][</span><span class="nv">$destination_id</span><span class="p">],</span> <span class="k">function</span><span class="p">(</span><span class="nv">$file1</span><span class="p">,</span> <span class="nv">$file2</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">// TODO What if datestamp is not available?</span>
                        <span class="nv">$a</span> <span class="o">=</span> <span class="nv">$file1</span><span class="p">[</span><span class="s1">'datestamp'</span><span class="p">];</span>
                        <span class="nv">$b</span> <span class="o">=</span> <span class="nv">$file2</span><span class="p">[</span><span class="s1">'datestamp'</span><span class="p">];</span>
                        <span class="k">if</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">==</span> <span class="nv">$b</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
                        <span class="k">return</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">&lt;</span> <span class="nv">$b</span><span class="p">)</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>
                    <span class="p">});</span>
                <span class="p">}</span>
                <span class="k">catch</span> <span class="p">(</span><span class="nc">\Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">logger</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">error</span><span class="p">(</span><span class="nf">dt</span><span class="p">(</span><span class="s1">'The destination !id caused an error: !error'</span><span class="p">,</span> <span class="p">[</span>
                        <span class="s1">'!id'</span> <span class="o">=&gt;</span> <span class="nv">$destination_id</span><span class="p">,</span>
                        <span class="s1">'!error'</span> <span class="o">=&gt;</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="nf">getMessage</span><span class="p">()</span>
                    <span class="p">]));</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="no">JSON_PRETTY_PRINT</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cd">/**
     * Backup.
     *
     * @command backup_migrate:backup
     * @aliases bamb
     *
     * @param source_id Identifier of the Backup Source.
     * @param destination_id Identifier of the Backup Destination.
     *
     * @return string Backup completion status
     *
     * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
     *
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">backup</span><span class="p">(</span>
        <span class="nv">$source_id</span><span class="p">,</span>
        <span class="nv">$destination_id</span>
    <span class="p">):</span> <span class="kt">string</span>
    <span class="p">{</span>
        <span class="nc">Drush</span><span class="o">::</span><span class="nf">bootstrapManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">doBootstrap</span><span class="p">(</span><span class="nc">DrupalBootLevels</span><span class="o">::</span><span class="no">FULL</span><span class="p">);</span>
        <span class="nv">$bam</span> <span class="o">=</span> <span class="nf">\backup_migrate_get_service_object</span><span class="p">();</span>
        <span class="nv">$bam</span><span class="o">-&gt;</span><span class="nf">backup</span><span class="p">(</span><span class="nv">$source_id</span><span class="p">,</span> <span class="nv">$destination_id</span><span class="p">);</span>
        <span class="k">return</span> <span class="nb">json_encode</span><span class="p">([</span>
            <span class="s1">'status'</span> <span class="o">=&gt;</span> <span class="s1">'success'</span><span class="p">,</span>
            <span class="s1">'message'</span> <span class="o">=&gt;</span> <span class="nf">dt</span><span class="p">(</span><span class="s1">'Backup complete.'</span><span class="p">)</span>
        <span class="p">],</span> <span class="no">JSON_PRETTY_PRINT</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cd">/**
     * Restore.
     *
     * @command backup_migrate:restore
     * @aliases bamr
     *
     * @param source_id Identifier of the Backup Source.
     * @param destination_id Identifier of the Backup Destination.
     * @param file_id optional Identifier of the Destination file.
     *
     * @return string Restore completion status
     *
     * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
     *
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">restore</span><span class="p">(</span>
        <span class="nv">$source_id</span><span class="p">,</span>
        <span class="nv">$destination_id</span><span class="p">,</span>
        <span class="nv">$file_id</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">string</span>
    <span class="p">{</span>
        <span class="nc">Drush</span><span class="o">::</span><span class="nf">bootstrapManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">doBootstrap</span><span class="p">(</span><span class="nc">DrupalBootLevels</span><span class="o">::</span><span class="no">FULL</span><span class="p">);</span>
        <span class="nv">$bam</span> <span class="o">=</span> <span class="nf">\backup_migrate_get_service_object</span><span class="p">();</span>
        <span class="nv">$bam</span><span class="o">-&gt;</span><span class="nf">restore</span><span class="p">(</span><span class="nv">$source_id</span><span class="p">,</span> <span class="nv">$destination_id</span><span class="p">,</span> <span class="nv">$file_id</span><span class="p">);</span>
        <span class="k">return</span> <span class="nb">json_encode</span><span class="p">([</span>
            <span class="s1">'status'</span> <span class="o">=&gt;</span> <span class="s1">'success'</span><span class="p">,</span>
            <span class="s1">'message'</span> <span class="o">=&gt;</span> <span class="nf">dt</span><span class="p">(</span><span class="s1">'Restore complete.'</span><span class="p">)</span>
        <span class="p">],</span> <span class="no">JSON_PRETTY_PRINT</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[Supporting content migrations across stages is a tricky subject, and most tools I reviewed seemed too fragile or too complex to be delivered to a client. We opted to use a simple workflow based on BAM (Backup and Migrate) coupled with config re-synchronization. To help automate the process, I wrote a set of drush commands that implement BAM backup and restore. It’s been tested extensively, but only with a specific set of sources and destinations, so I am reproducing the current code here until it gets published as a module. One design decision I made was to produce output as JSON, to make it easier for downstream automation. The typical usage scenario is the following: $ drush bamb default_db private_files // =&gt; { // "status": "success", // "message": "Backup complete." //} $ drush bamls --files=private_files // =&gt; { // "sources": [ // { // "id": "default_db", // "label": "Default Drupal Database", // "type": "DefaultDB" // }, // { // "id": "entire_site", // "label": "Entire Site (do not use)", // "type": "EntireSite" // }, // { // "id": "private_files", // "label": "Private Files Directory", // "type": "DrupalFiles" // }, // { // "id": "public_files", // "label": "Public Files Directory", // "type": "DrupalFiles" // }, // { // "id": "ssot_database", // "label": "SSoT Database", // "type": "PostgreSQL" // } // ], // "destinations": [ // { // "id": "private_files", // "label": "Private Files Directory", // "type": "Directory" // }, // { // "id": "s3_bucket", // "label": "S3 Bucket", // "type": "awss3" // } // ], // "files": { // "private_files": [ // { // "id": "backup-2023-01-27T15-44-19.sql.gz", // "filename": "prod-2023-01-27T15-44-19.sql.gz", // "filesize": 19499222, // "datestamp": 1674869134 // } // ] // } //} $ drush bamr default_db private_files backup-2023-01-27T15-44-19.sql.gz // =&gt; { // "status": "success", // "message": "Restore complete." //} And here’s the source for the command: &lt;?php namespace Drush\Commands; use Drush\Drush; use Drush\Commands\DrushCommands; use Drush\Boot\DrupalBootLevels; use Drupal\backup_migrate\Core\Destination\ListableDestinationInterface; use Symfony\Component\Console\Input\InputOption; class BackupMigrateCommands extends DrushCommands { /** * List sources and destinations. * * @command backup_migrate:list * @aliases bamls * * @option sources Flag to list sources (default: yes, use --no-sources to hide) * @option destinations Flag to list destinations (default: yes, use --no-destinations to hide) * @option files Flag to list files for a comma-separated list of destination identifiers (default: none) * * @param options * * @return string JSON listing of sources, destinations, files * */ public function list(array $options = [ 'sources' =&gt; true, 'destinations' =&gt; true, 'files' =&gt; InputOption::VALUE_REQUIRED, ]): string { Drush::bootstrapManager()-&gt;doBootstrap(DrupalBootLevels::FULL); $bam = \backup_migrate_get_service_object(); $output = []; if ($options['sources']) { $output['sources'] = array_reduce(array_keys($bam-&gt;sources()-&gt;getAll()), function($sources, $source_id) { $source = \Drupal::entityTypeManager()-&gt;getStorage('backup_migrate_source')-&gt;load($source_id); if ($source) { $sources[] = [ 'id' =&gt; $source_id, 'label' =&gt; $source-&gt;get('label'), 'type' =&gt; $source-&gt;get('type'), ]; } return $sources; }, []); } if ($options['destinations']) { $output['destinations'] = array_reduce(array_keys($bam-&gt;destinations()-&gt;getAll()), function($destinations, $destination_id) { $destination = \Drupal::entityTypeManager()-&gt;getStorage('backup_migrate_destination')-&gt;load($destination_id); if ($destination) { $destinations[] = [ 'id' =&gt; $destination_id, 'label' =&gt; $destination-&gt;get('label'), 'type' =&gt; $destination-&gt;get('type'), ]; } return $destinations; }, []); } if ($options['files']) { foreach(array_map('trim', explode(',', $options['files'])) as $destination_id) { $destination = $bam-&gt;destinations()-&gt;get($destination_id); if (!$destination) { $this-&gt;logger()-&gt;warning(dt('The destination !id does not exist.', ['!id' =&gt; $destination_id])); continue; } if (!$destination instanceof ListableDestinationInterface) { $this-&gt;logger()-&gt;warning(dt('The destination !id is not listable.', ['!id' =&gt; $destination_id])); continue; } try { $files = $destination-&gt;listFiles(); $output['files'][$destination_id] = array_reduce(array_keys($files), function($files_info, $file_id) use($files) { $files_info[] = array_merge([ 'id' =&gt; $file_id, 'filename' =&gt; $files[$file_id]-&gt;getFullName(), ], $files[$file_id]-&gt;getMetaAll()); return $files_info; }, []); usort($output['files'][$destination_id], function($file1, $file2) { // TODO What if datestamp is not available? $a = $file1['datestamp']; $b = $file2['datestamp']; if ($a == $b) return 0; return ($a &lt; $b) ? -1 : 1; }); } catch (\Exception $e) { $this-&gt;logger()-&gt;error(dt('The destination !id caused an error: !error', [ '!id' =&gt; $destination_id, '!error' =&gt; $e-&gt;getMessage() ])); } } } return json_encode($output, JSON_PRETTY_PRINT); } /** * Backup. * * @command backup_migrate:backup * @aliases bamb * * @param source_id Identifier of the Backup Source. * @param destination_id Identifier of the Backup Destination. * * @return string Backup completion status * * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException * */ public function backup( $source_id, $destination_id ): string { Drush::bootstrapManager()-&gt;doBootstrap(DrupalBootLevels::FULL); $bam = \backup_migrate_get_service_object(); $bam-&gt;backup($source_id, $destination_id); return json_encode([ 'status' =&gt; 'success', 'message' =&gt; dt('Backup complete.') ], JSON_PRETTY_PRINT); } /** * Restore. * * @command backup_migrate:restore * @aliases bamr * * @param source_id Identifier of the Backup Source. * @param destination_id Identifier of the Backup Destination. * @param file_id optional Identifier of the Destination file. * * @return string Restore completion status * * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException * */ public function restore( $source_id, $destination_id, $file_id = null, ): string { Drush::bootstrapManager()-&gt;doBootstrap(DrupalBootLevels::FULL); $bam = \backup_migrate_get_service_object(); $bam-&gt;restore($source_id, $destination_id, $file_id); return json_encode([ 'status' =&gt; 'success', 'message' =&gt; dt('Restore complete.') ], JSON_PRETTY_PRINT); } }]]></summary></entry><entry><title type="html">Drupal 9: Fixing Google Charts rendering in tabbed pages</title><link href="https://blog.karimratib.me/2023/05/01/google-charts-tabs.html" rel="alternate" type="text/html" title="Drupal 9: Fixing Google Charts rendering in tabbed pages" /><published>2023-05-01T00:00:00-07:00</published><updated>2023-05-01T00:00:00-07:00</updated><id>https://blog.karimratib.me/2023/05/01/google-charts-tabs</id><content type="html" xml:base="https://blog.karimratib.me/2023/05/01/google-charts-tabs.html"><![CDATA[<p>Google Charts has a <a href="https://stackoverflow.com/search?q=google+charts+hidden">long-standing, known issue rendering correctly in hidden divs</a>. This caused us much head scratching and debugging hours before we even landed on the correct diagnosis: a chart that renders correctly on the <a href="https://git.drupalcode.org/project/charts/-/tree/5.0.x/modules/charts_api_example">Charts API Example page</a> does not work inside a tab! Oh, the joys of programming sometimes.</p>

<p>Once diagnosed, the fix was obvious: Detect that a tab is selected to refresh the charts contained therein. The following JavaScript file can be added to your theme as is and should handle the standard Bootstrap tabs (it also fixes the window resize event handling). It does depend on a small patch made to the <a href="https://git.drupalcode.org/project/charts/-/tree/5.0.x/modules/charts_google"><code class="language-plaintext highlighter-rouge">charts_google</code> module</a>, to avoid leaking memory when the graph is redrawn:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">Drupal</span><span class="p">,</span> <span class="nx">once</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">(</span><span class="dl">"</span><span class="s2">use strict</span><span class="dl">"</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nf">redrawGoogleChart</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">contents</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Drupal</span><span class="p">.</span><span class="nx">Charts</span><span class="p">.</span><span class="nc">Contents</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">chartId</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">Drupal</span><span class="p">.</span><span class="nx">googleCharts</span><span class="p">.</span><span class="nx">charts</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="nx">chartId</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">Drupal</span><span class="p">.</span><span class="nx">googleCharts</span><span class="p">.</span><span class="nx">charts</span><span class="p">[</span><span class="nx">chartId</span><span class="p">].</span><span class="nf">clearChart</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="kd">const</span> <span class="nx">dataAttributes</span> <span class="o">=</span> <span class="nx">contents</span><span class="p">.</span><span class="nf">getData</span><span class="p">(</span><span class="nx">chartId</span><span class="p">);</span>
    <span class="nx">Drupal</span><span class="p">.</span><span class="nx">googleCharts</span><span class="p">.</span><span class="nf">drawChart</span><span class="p">(</span><span class="nx">chartId</span><span class="p">,</span> <span class="nx">dataAttributes</span><span class="p">[</span><span class="dl">'</span><span class="s1">visualization</span><span class="dl">'</span><span class="p">],</span> <span class="nx">dataAttributes</span><span class="p">[</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">],</span> <span class="nx">dataAttributes</span><span class="p">[</span><span class="dl">'</span><span class="s1">options</span><span class="dl">'</span><span class="p">])();</span>
  <span class="p">}</span>

  <span class="nx">Drupal</span><span class="p">.</span><span class="nx">behaviors</span><span class="p">.</span><span class="nx">redrawGoogleCharts</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">attach</span><span class="p">:</span> <span class="nf">function </span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">settings</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.nav-link</span><span class="dl">'</span><span class="p">,</span> <span class="nx">context</span><span class="p">).</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">shown.bs.tab</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">Drupal</span><span class="p">.</span><span class="nx">Charts</span> <span class="o">&amp;&amp;</span> <span class="nx">Drupal</span><span class="p">.</span><span class="nx">googleCharts</span><span class="p">)</span> <span class="p">{</span>
          <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.charts-google</span><span class="dl">'</span><span class="p">,</span> <span class="nf">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">data-bs-target</span><span class="dl">'</span><span class="p">)).</span><span class="nf">each</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
              <span class="nf">redrawGoogleChart</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
            <span class="p">}</span>
          <span class="p">});</span>
        <span class="p">}</span>
      <span class="p">});</span>

      <span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">resize</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">Drupal</span><span class="p">.</span><span class="nx">Charts</span> <span class="o">&amp;&amp;</span> <span class="nx">Drupal</span><span class="p">.</span><span class="nx">googleCharts</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">Drupal</span><span class="p">.</span><span class="nx">googleCharts</span><span class="p">.</span><span class="nf">waitForFinalEvent</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
            <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.charts-google</span><span class="dl">'</span><span class="p">).</span><span class="nf">each</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
              <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
                <span class="nf">redrawGoogleChart</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
              <span class="p">}</span>
            <span class="p">});</span>
          <span class="p">},</span> <span class="mi">200</span><span class="p">,</span> <span class="dl">'</span><span class="s1">google-charts-redraw</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">});</span>
    <span class="p">},</span>
  <span class="p">};</span>

<span class="p">})(</span><span class="nx">jQuery</span><span class="p">,</span> <span class="nx">Drupal</span><span class="p">,</span> <span class="nx">once</span><span class="p">);</span>
</code></pre></div></div>
<div class="language-patch highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/modules/charts_google/js/charts_google.js b/modules/charts_google/js/charts_google.js
index f7abe81..76143bc 100755
</span><span class="gd">--- a/modules/charts_google/js/charts_google.js
</span><span class="gi">+++ b/modules/charts_google/js/charts_google.js
</span><span class="p">@@ -6,7 +6,7 @@</span>
<span class="err">
</span>   'use strict';
<span class="err">
</span><span class="gd">-  Drupal.googleCharts = Drupal.googleCharts || {charts: []};
</span><span class="gi">+  Drupal.googleCharts = Drupal.googleCharts || {charts: {}};
</span><span class="err">
</span>   /**
    * Behavior to initialize Google Charts.
<span class="p">@@ -122,6 +122,7 @@</span>
         options['colorAxis'] = {colors: colors};
       }
       chart.draw(data, options);
<span class="gi">+      Drupal.googleCharts.charts[chartId] = chart;
</span>     };
   };
</code></pre></div></div>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[Google Charts has a long-standing, known issue rendering correctly in hidden divs. This caused us much head scratching and debugging hours before we even landed on the correct diagnosis: a chart that renders correctly on the Charts API Example page does not work inside a tab! Oh, the joys of programming sometimes. Once diagnosed, the fix was obvious: Detect that a tab is selected to refresh the charts contained therein. The following JavaScript file can be added to your theme as is and should handle the standard Bootstrap tabs (it also fixes the window resize event handling). It does depend on a small patch made to the charts_google module, to avoid leaking memory when the graph is redrawn: (function ($, Drupal, once) { ("use strict"); function redrawGoogleChart(element) { const contents = new Drupal.Charts.Contents(); const chartId = element.id; if (Drupal.googleCharts.charts.hasOwnProperty(chartId)) { Drupal.googleCharts.charts[chartId].clearChart(); } const dataAttributes = contents.getData(chartId); Drupal.googleCharts.drawChart(chartId, dataAttributes['visualization'], dataAttributes['data'], dataAttributes['options'])(); } Drupal.behaviors.redrawGoogleCharts = { attach: function (context, settings) { $('.nav-link', context).on('shown.bs.tab', function (e) { if (Drupal.Charts &amp;&amp; Drupal.googleCharts) { $('.charts-google', $(e.target).attr('data-bs-target')).each(function () { if (this.dataset.hasOwnProperty('chart')) { redrawGoogleChart(this); } }); } }); window.addEventListener('resize', function () { if (Drupal.Charts &amp;&amp; Drupal.googleCharts) { Drupal.googleCharts.waitForFinalEvent(function () { $('.charts-google').each(function () { if (this.dataset.hasOwnProperty('chart')) { redrawGoogleChart(this); } }); }, 200, 'google-charts-redraw'); } }); }, }; })(jQuery, Drupal, once); diff --git a/modules/charts_google/js/charts_google.js b/modules/charts_google/js/charts_google.js index f7abe81..76143bc 100755 --- a/modules/charts_google/js/charts_google.js +++ b/modules/charts_google/js/charts_google.js @@ -6,7 +6,7 @@ 'use strict'; - Drupal.googleCharts = Drupal.googleCharts || {charts: []}; + Drupal.googleCharts = Drupal.googleCharts || {charts: {}}; /** * Behavior to initialize Google Charts. @@ -122,6 +122,7 @@ options['colorAxis'] = {colors: colors}; } chart.draw(data, options); + Drupal.googleCharts.charts[chartId] = chart; }; };]]></summary></entry><entry><title type="html">Drupal 9: Backup and Migrate - PostgreSQL support</title><link href="https://blog.karimratib.me/2023/04/01/backup-migrate-postgresql.html" rel="alternate" type="text/html" title="Drupal 9: Backup and Migrate - PostgreSQL support" /><published>2023-04-01T00:00:00-07:00</published><updated>2023-04-01T00:00:00-07:00</updated><id>https://blog.karimratib.me/2023/04/01/backup-migrate-postgresql</id><content type="html" xml:base="https://blog.karimratib.me/2023/04/01/backup-migrate-postgresql.html"><![CDATA[<p>I was suprised this hadn’t been already done, so I <a href="https://www.drupal.org/project/backup_migrate/issues/2930369">added PostgreSQL support to the venerable Backup and Migrate (BAM) module</a>. Instead of previous patches that implemented SQL generation and parsing manually, I opted for the much simpler and (imho) more robust approach of invoking the standard tools <code class="language-plaintext highlighter-rouge">pg_dump</code> and <code class="language-plaintext highlighter-rouge">pgsql</code> for the backup and restore operations. It took me less than a day to get that patch working, and we’ve been using it daily on this project for the past 8 months, so I have good confidence it is production-ready.</p>

<p>For example, the backup implementation is about 40 lines long:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cd">/**
   * Export this source to the given temp file.
   *
   * This should be the main back up function for this source.
   *
   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
   *   A backup file with the contents of the source dumped to it.
   */</span>
  <span class="k">public</span> <span class="k">function</span> <span class="n">exportToFile</span><span class="p">()</span> <span class="p">{</span>
    <span class="nv">$adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DrupalTempFileAdapter</span><span class="p">(</span><span class="nc">\Drupal</span><span class="o">::</span><span class="nf">service</span><span class="p">(</span><span class="s1">'file_system'</span><span class="p">));</span>
    <span class="nv">$tempfilemanager</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TempFileManager</span><span class="p">(</span><span class="nv">$adapter</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">setTempFileManager</span><span class="p">(</span><span class="nv">$tempfilemanager</span><span class="p">);</span>
    <span class="nv">$file</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getTempFileManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">create</span><span class="p">(</span><span class="s1">'sql'</span><span class="p">);</span>

    <span class="c1">// A bit of PHP magic to get the configuration of the db_exclude plugin.</span>
    <span class="c1">// The PluginManagerInterface::get($plugin_id) method returns a PluginInterface which does not expose the confGet() method.</span>
    <span class="c1">// So we want to cast it to a PluginBase which does expose confGet().</span>
    <span class="c1">// Since PHP doesn't have an explicit casting operator for classes, we use an inline function whose return type is PluginBase.</span>
    <span class="c1">// https://stackoverflow.com/a/69771390/209184</span>
    <span class="nv">$exclude_tables</span> <span class="o">=</span> <span class="p">(</span><span class="k">array</span><span class="p">)</span> <span class="p">(</span><span class="k">fn</span><span class="p">(</span><span class="nv">$plugin</span><span class="p">):</span><span class="kt">PluginBase</span><span class="o">=&gt;</span><span class="nv">$plugin</span><span class="p">)(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">plugins</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'db_exclude'</span><span class="p">))</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'exclude_tables'</span><span class="p">);</span>
    <span class="nv">$nodata_tables</span> <span class="o">=</span> <span class="p">(</span><span class="k">array</span><span class="p">)</span> <span class="p">(</span><span class="k">fn</span><span class="p">(</span><span class="nv">$plugin</span><span class="p">):</span><span class="kt">PluginBase</span><span class="o">=&gt;</span><span class="nv">$plugin</span><span class="p">)(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">plugins</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'db_exclude'</span><span class="p">))</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'nodata_tables'</span><span class="p">);</span>

    <span class="nv">$process_args</span> <span class="o">=</span> <span class="p">[</span>
      <span class="s1">'pg_dump'</span><span class="p">,</span>
      <span class="s1">'--host'</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'host'</span><span class="p">),</span>
      <span class="s1">'--port'</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'port'</span><span class="p">),</span>
      <span class="s1">'--user'</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'username'</span><span class="p">),</span>
      <span class="s1">'--clean'</span>
    <span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$exclude_tables</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">foreach</span><span class="p">(</span><span class="nv">$exclude_tables</span> <span class="k">as</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">array_push</span><span class="p">(</span><span class="nv">$process_args</span><span class="p">,</span> <span class="s1">'--exclude-table'</span><span class="p">,</span> <span class="nv">$table</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$nodata_tables</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">foreach</span><span class="p">(</span><span class="nv">$nodata_tables</span> <span class="k">as</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">array_push</span><span class="p">(</span><span class="nv">$process_args</span><span class="p">,</span> <span class="s1">'--exclude-table-data'</span><span class="p">,</span> <span class="nv">$table</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nv">$process</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Process</span><span class="p">(</span>
      <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$process_args</span><span class="p">,</span> <span class="p">[</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'database'</span><span class="p">)]),</span>
      <span class="kc">null</span><span class="p">,</span>
      <span class="p">[</span>
        <span class="s1">'PGPASSWORD'</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'password'</span><span class="p">)</span>
      <span class="p">]</span>
    <span class="p">);</span>
    <span class="nv">$process</span><span class="o">-&gt;</span><span class="nf">run</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$process</span><span class="o">-&gt;</span><span class="nf">isSuccessful</span><span class="p">())</span> <span class="p">{</span>
      <span class="nv">$message</span> <span class="o">=</span> <span class="nv">$process</span><span class="o">-&gt;</span><span class="nf">getErrorOutput</span><span class="p">();</span>
      <span class="nc">\Drupal</span><span class="o">::</span><span class="nf">logger</span><span class="p">(</span><span class="s1">'backup_migrate'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">error</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">BackupMigrateException</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nv">$file</span><span class="o">-&gt;</span><span class="nf">write</span><span class="p">(</span><span class="nv">$process</span><span class="o">-&gt;</span><span class="nf">getOutput</span><span class="p">());</span>
    <span class="nv">$file</span><span class="o">-&gt;</span><span class="nf">close</span><span class="p">();</span>
    <span class="k">return</span> <span class="nv">$file</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[I was suprised this hadn’t been already done, so I added PostgreSQL support to the venerable Backup and Migrate (BAM) module. Instead of previous patches that implemented SQL generation and parsing manually, I opted for the much simpler and (imho) more robust approach of invoking the standard tools pg_dump and pgsql for the backup and restore operations. It took me less than a day to get that patch working, and we’ve been using it daily on this project for the past 8 months, so I have good confidence it is production-ready. For example, the backup implementation is about 40 lines long: /** * Export this source to the given temp file. * * This should be the main back up function for this source. * * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface * A backup file with the contents of the source dumped to it. */ public function exportToFile() { $adapter = new DrupalTempFileAdapter(\Drupal::service('file_system')); $tempfilemanager = new TempFileManager($adapter); $this-&gt;setTempFileManager($tempfilemanager); $file = $this-&gt;getTempFileManager()-&gt;create('sql'); // A bit of PHP magic to get the configuration of the db_exclude plugin. // The PluginManagerInterface::get($plugin_id) method returns a PluginInterface which does not expose the confGet() method. // So we want to cast it to a PluginBase which does expose confGet(). // Since PHP doesn't have an explicit casting operator for classes, we use an inline function whose return type is PluginBase. // https://stackoverflow.com/a/69771390/209184 $exclude_tables = (array) (fn($plugin):PluginBase=&gt;$plugin)($this-&gt;plugins()-&gt;get('db_exclude'))-&gt;confGet('exclude_tables'); $nodata_tables = (array) (fn($plugin):PluginBase=&gt;$plugin)($this-&gt;plugins()-&gt;get('db_exclude'))-&gt;confGet('nodata_tables'); $process_args = [ 'pg_dump', '--host', $this-&gt;confGet('host'), '--port', $this-&gt;confGet('port'), '--user', $this-&gt;confGet('username'), '--clean' ]; if ($exclude_tables) { foreach($exclude_tables as $table) { array_push($process_args, '--exclude-table', $table); } } if ($nodata_tables) { foreach($nodata_tables as $table) { array_push($process_args, '--exclude-table-data', $table); } } $process = new Process( array_merge($process_args, [$this-&gt;confGet('database')]), null, [ 'PGPASSWORD' =&gt; $this-&gt;confGet('password') ] ); $process-&gt;run(); if (!$process-&gt;isSuccessful()) { $message = $process-&gt;getErrorOutput(); \Drupal::logger('backup_migrate')-&gt;error($message); throw new BackupMigrateException($message); } $file-&gt;write($process-&gt;getOutput()); $file-&gt;close(); return $file; }]]></summary></entry><entry><title type="html">Drupal 9: Showing an export link for each manually updated config item</title><link href="https://blog.karimratib.me/2023/03/01/export-link.html" rel="alternate" type="text/html" title="Drupal 9: Showing an export link for each manually updated config item" /><published>2023-03-01T00:00:00-08:00</published><updated>2023-03-01T00:00:00-08:00</updated><id>https://blog.karimratib.me/2023/03/01/export-link</id><content type="html" xml:base="https://blog.karimratib.me/2023/03/01/export-link.html"><![CDATA[<p>The <a href="https://www.drupal.org/docs/drupal-apis/configuration-api">Configuration API</a> is by far the best surprise I got about Drupal 9. Finally, a core system that is robust enough to hold any configuration set reliably, and extensible enough for contrib modules. Back in Drupal 7, maintaining a consistent configuration across stages had been the bane of my existence, and I was delighted to find it was now a solved problem.</p>

<p>One minor wrinkle I found is related to the scenario of admin users wanting to update the configs that are otherwise stored in source control:</p>
<ul>
  <li>Admin changes a permission on stage PROD via Admin UI</li>
  <li>Devops makes a code deployment on stages DEV =&gt; TEST =&gt; PROD</li>
  <li>The permission change is lost, unless Admin exports the updated permission config and hands it to Devops before deployment</li>
</ul>

<p>To support this scenario, Admin needs to go to <strong>Configuration synchronization</strong> <code class="language-plaintext highlighter-rouge">/admin/config/development/configuration</code>, examine the changed items, then head over to <strong>Single export</strong> <code class="language-plaintext highlighter-rouge">/admin/config/development/configuration/single/export</code> and GUESS how the name that they saw on the previous screen maps to a given configuration type/name pair on this one. User-unfriendly and error-prone!</p>

<p>My quick solution was to add an <strong>Export config</strong> action for each updated item in the <strong>Configuration synchronization</strong> screen, as per the attached screenshot. This was feasible to implement because <a href="https://git.drupalcode.org/project/drupal/-/blob/9.5.3/core/modules/config/config.routing.yml#L56-64">the <strong>Single export</strong> route actually accepts a specific configuration type/name pair</a>, which my code computes given the configuration item (and that was not terribly straightforward). Now Admin can easily export all modified configuration items without any guesswork!</p>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/drupal-config-sync.png">
      <img src="/assets/drupal-config-sync.png" style="max-width: 100%;" alt="" />
    </a>
    <figcaption></figcaption>
  </figure>
</div>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/drupal-config-export.png">
      <img src="/assets/drupal-config-export.png" style="max-width: 100%;" alt="" />
    </a>
    <figcaption></figcaption>
  </figure>
</div>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">use</span> <span class="nc">Drupal\Core\Config\Entity\ConfigEntityInterface</span><span class="p">;</span>

<span class="cd">/**
 * Implements hook_form_FORM_ID_alter() for config_admin_import_form.
 *
 * Show export link for each modified config item.
 */</span>
<span class="k">function</span> <span class="n">MYMODULE_form_config_admin_import_form_alter</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$form</span><span class="p">,</span> <span class="nc">FormStateInterface</span> <span class="nv">$form_state</span><span class="p">,</span> <span class="nv">$form_id</span><span class="p">)</span> <span class="p">{</span>
  <span class="nv">$configs</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">foreach</span> <span class="p">(</span><span class="nc">\Drupal</span><span class="o">::</span><span class="nf">service</span><span class="p">(</span><span class="s1">'entity_type.manager'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">getDefinitions</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$entity_type</span> <span class="o">=&gt;</span> <span class="nv">$definition</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$definition</span><span class="o">-&gt;</span><span class="nf">entityClassImplements</span><span class="p">(</span><span class="nc">ConfigEntityInterface</span><span class="o">::</span><span class="n">class</span><span class="p">))</span> <span class="p">{</span>
      <span class="nv">$entity_storage</span> <span class="o">=</span> <span class="nc">\Drupal</span><span class="o">::</span><span class="nf">service</span><span class="p">(</span><span class="s1">'entity_type.manager'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">getStorage</span><span class="p">(</span><span class="nv">$entity_type</span><span class="p">);</span>
      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$entity_storage</span><span class="o">-&gt;</span><span class="nf">loadMultiple</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$entity</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$configs</span><span class="p">[</span><span class="nv">$definition</span><span class="o">-&gt;</span><span class="nf">getConfigPrefix</span><span class="p">()</span> <span class="mf">.</span> <span class="s1">'.'</span> <span class="mf">.</span> <span class="nv">$entity</span><span class="o">-&gt;</span><span class="nf">id</span><span class="p">()]</span> <span class="o">=</span> <span class="p">[</span>
          <span class="s1">'config_type'</span> <span class="o">=&gt;</span> <span class="nv">$entity_type</span><span class="p">,</span>
          <span class="s1">'config_name'</span> <span class="o">=&gt;</span> <span class="nv">$entity</span><span class="o">-&gt;</span><span class="nf">id</span><span class="p">(),</span>
        <span class="p">];</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nv">$collection</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
  <span class="nv">$config_change_type</span> <span class="o">=</span> <span class="s1">'update'</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$form</span><span class="p">[</span><span class="nv">$collection</span><span class="p">][</span><span class="nv">$config_change_type</span><span class="p">][</span><span class="s1">'list'</span><span class="p">][</span><span class="s1">'#rows'</span><span class="p">]))</span> <span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$form</span><span class="p">[</span><span class="nv">$collection</span><span class="p">][</span><span class="nv">$config_change_type</span><span class="p">][</span><span class="s1">'list'</span><span class="p">][</span><span class="s1">'#rows'</span><span class="p">]</span> <span class="k">as</span> <span class="o">&amp;</span><span class="nv">$config_change</span><span class="p">)</span> <span class="p">{</span>
      <span class="nv">$config_item</span> <span class="o">=</span> <span class="nv">$config_change</span><span class="p">[</span><span class="s1">'name'</span><span class="p">];</span>

      <span class="k">if</span> <span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="nv">$config_item</span><span class="p">,</span> <span class="nv">$configs</span><span class="p">))</span> <span class="p">{</span>
        <span class="nv">$config_type</span> <span class="o">=</span> <span class="nv">$configs</span><span class="p">[</span><span class="nv">$config_item</span><span class="p">][</span><span class="s1">'config_type'</span><span class="p">];</span>
        <span class="nv">$config_name</span> <span class="o">=</span> <span class="nv">$configs</span><span class="p">[</span><span class="nv">$config_item</span><span class="p">][</span><span class="s1">'config_name'</span><span class="p">];</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
        <span class="nv">$config_type</span> <span class="o">=</span> <span class="s1">'system.simple'</span><span class="p">;</span>
        <span class="nv">$config_name</span> <span class="o">=</span> <span class="nv">$config_item</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="nv">$config_change</span><span class="p">[</span><span class="s1">'operations'</span><span class="p">][</span><span class="s1">'data'</span><span class="p">][</span><span class="s1">'#links'</span><span class="p">][</span><span class="s1">'export'</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">'title'</span> <span class="o">=&gt;</span> <span class="nf">t</span><span class="p">(</span><span class="s1">'Export config'</span><span class="p">),</span>
        <span class="s1">'url'</span> <span class="o">=&gt;</span> <span class="nc">Url</span><span class="o">::</span><span class="nf">fromRoute</span><span class="p">(</span><span class="s1">'config.export_single'</span><span class="p">,</span> <span class="p">[</span>
          <span class="s1">'config_type'</span> <span class="o">=&gt;</span> <span class="nv">$config_type</span><span class="p">,</span>
          <span class="s1">'config_name'</span> <span class="o">=&gt;</span> <span class="nv">$config_name</span><span class="p">,</span>
        <span class="p">]),</span>
      <span class="p">];</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[The Configuration API is by far the best surprise I got about Drupal 9. Finally, a core system that is robust enough to hold any configuration set reliably, and extensible enough for contrib modules. Back in Drupal 7, maintaining a consistent configuration across stages had been the bane of my existence, and I was delighted to find it was now a solved problem. One minor wrinkle I found is related to the scenario of admin users wanting to update the configs that are otherwise stored in source control: Admin changes a permission on stage PROD via Admin UI Devops makes a code deployment on stages DEV =&gt; TEST =&gt; PROD The permission change is lost, unless Admin exports the updated permission config and hands it to Devops before deployment To support this scenario, Admin needs to go to Configuration synchronization /admin/config/development/configuration, examine the changed items, then head over to Single export /admin/config/development/configuration/single/export and GUESS how the name that they saw on the previous screen maps to a given configuration type/name pair on this one. User-unfriendly and error-prone! My quick solution was to add an Export config action for each updated item in the Configuration synchronization screen, as per the attached screenshot. This was feasible to implement because the Single export route actually accepts a specific configuration type/name pair, which my code computes given the configuration item (and that was not terribly straightforward). Now Admin can easily export all modified configuration items without any guesswork! use Drupal\Core\Config\Entity\ConfigEntityInterface; /** * Implements hook_form_FORM_ID_alter() for config_admin_import_form. * * Show export link for each modified config item. */ function MYMODULE_form_config_admin_import_form_alter(&amp;$form, FormStateInterface $form_state, $form_id) { $configs = []; foreach (\Drupal::service('entity_type.manager')-&gt;getDefinitions() as $entity_type =&gt; $definition) { if ($definition-&gt;entityClassImplements(ConfigEntityInterface::class)) { $entity_storage = \Drupal::service('entity_type.manager')-&gt;getStorage($entity_type); foreach ($entity_storage-&gt;loadMultiple() as $entity) { $configs[$definition-&gt;getConfigPrefix() . '.' . $entity-&gt;id()] = [ 'config_type' =&gt; $entity_type, 'config_name' =&gt; $entity-&gt;id(), ]; } } } $collection = ''; $config_change_type = 'update'; if (!empty($form[$collection][$config_change_type]['list']['#rows'])) { foreach ($form[$collection][$config_change_type]['list']['#rows'] as &amp;$config_change) { $config_item = $config_change['name']; if (array_key_exists($config_item, $configs)) { $config_type = $configs[$config_item]['config_type']; $config_name = $configs[$config_item]['config_name']; } else { $config_type = 'system.simple'; $config_name = $config_item; } $config_change['operations']['data']['#links']['export'] = [ 'title' =&gt; t('Export config'), 'url' =&gt; Url::fromRoute('config.export_single', [ 'config_type' =&gt; $config_type, 'config_name' =&gt; $config_name, ]), ]; } } }]]></summary></entry><entry><title type="html">Still Drupal after all these years</title><link href="https://blog.karimratib.me/2023/02/01/still-drupal.html" rel="alternate" type="text/html" title="Still Drupal after all these years" /><published>2023-02-01T00:00:00-08:00</published><updated>2023-02-01T00:00:00-08:00</updated><id>https://blog.karimratib.me/2023/02/01/still-drupal</id><content type="html" xml:base="https://blog.karimratib.me/2023/02/01/still-drupal.html"><![CDATA[<p>I thought I was done with Drupal in 2016 when we rebuilt <a href="https://github.com/meedan/check">Meedan’s fact-checking platform, Check</a>, using Ruby / React. It felt like a breath of fresh air to decouple the frontend from the backend, and further subdivide the application into a set of services that can be designed and maintained independently. Breaking the monolith was all the rage back then!</p>

<p>But I was hired again for my Drupal expertise in 2022. For the past 8 months, I’ve been working on a massive site refresh using Drupal 9, and I must admit that, against my expectations, I really enjoyed working on this platform. I found Drupal 8/9+ to be a real step forward in terms of developer experience compared to previous versions, particularly well-suited to build large web sites.</p>

<p>But I won’t get into the top 10 reasons I like Drupal 9. In this post, I will list a few interesting snippets that I developed over the course of this project:</p>

<ul>
  <li><a href="/2023/03/01/export-link.html">Showing an export link for each manually updated config item</a></li>
  <li><a href="/2023/04/01/backup-migrate-postgresql.html">Backup and Migrate: PostgreSQL support</a></li>
  <li><a href="/2023/06/01/backup-migrate-drush.html">Backup and Migrate: Drupal 9 / Drush 11 support</a></li>
  <li><a href="/2023/05/01/google-charts-tabs.html">Fixing Google Charts rendering in tabbed pages</a></li>
</ul>

<p>I might dig up more snippets later - for now, happy coding! :cat: :computer:</p>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[I thought I was done with Drupal in 2016 when we rebuilt Meedan’s fact-checking platform, Check, using Ruby / React. It felt like a breath of fresh air to decouple the frontend from the backend, and further subdivide the application into a set of services that can be designed and maintained independently. Breaking the monolith was all the rage back then! But I was hired again for my Drupal expertise in 2022. For the past 8 months, I’ve been working on a massive site refresh using Drupal 9, and I must admit that, against my expectations, I really enjoyed working on this platform. I found Drupal 8/9+ to be a real step forward in terms of developer experience compared to previous versions, particularly well-suited to build large web sites. But I won’t get into the top 10 reasons I like Drupal 9. In this post, I will list a few interesting snippets that I developed over the course of this project: Showing an export link for each manually updated config item Backup and Migrate: PostgreSQL support Backup and Migrate: Drupal 9 / Drush 11 support Fixing Google Charts rendering in tabbed pages I might dig up more snippets later - for now, happy coding! :cat: :computer:]]></summary></entry><entry><title type="html">How to prepare your Web application for Web MIDI on Firefox</title><link href="https://blog.karimratib.me/2022/04/23/firefox-webmidi.html" rel="alternate" type="text/html" title="How to prepare your Web application for Web MIDI on Firefox" /><published>2022-04-23T00:00:00-07:00</published><updated>2022-04-23T00:00:00-07:00</updated><id>https://blog.karimratib.me/2022/04/23/firefox-webmidi</id><content type="html" xml:base="https://blog.karimratib.me/2022/04/23/firefox-webmidi.html"><![CDATA[<table class="changelog">
  <thead>
    <th>Changelog</th>
    <th></th>
  </thead>
  <tbody>


  <tr>
    
    
      <td>Nov 20, 2022 </td>
    
      <td> OBSOLETE! Firefox no longer requires the complicated process outlined below to enable Web MIDI and now behaves like Chrome does. I am only keeping this post for posterity.</td>
    
  </tr>

  </tbody>
</table>

<p>In this note, I explain the process of preparing your Web application to use Wed MIDI API on Firefox, because this process is different from Chrome and involves a few more steps that may be counter-intuitive or surprising. I include screenshots and code snippets from my own app.</p>

<!--more-->

<p>After 9 years of waiting, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=836897">Web MIDI support has finally landed in Firefox</a>, as of FF 99. This is great cause for celebration for Web audio developers, as Firefox is the last of the independent Web browsers. Our audio applications no longer need to be crippled on this platform :tada: :notes:</p>

<p>One reason for this long delay was the reluctance of the core Firefox team to open up new potential security holes in the already wide surface of Web APIs. Indeed, Web MIDI allows pages to access MIDI devices on the user’s machine, both for reading and writing. The Web MIDI committee <a href="https://webaudio.github.io/web-midi-api/#security-and-privacy-considerations-of-midi">acknowledges the security implications of this API</a>, and <a href="https://webaudio.github.io/web-midi-api/#obtaining-access-to-midi-devices">has added explicit gatekeeping measures</a> to allow browser makers to choose the level of security they deem appropriate.</p>

<p>In Chrome, calling <code class="language-plaintext highlighter-rouge">navigator.requestMIDIAccess()</code> checks for an HTTPS connection (or <code class="language-plaintext highlighter-rouge">localhost</code>) before allowing the usage of the Web MIDI API. In case <code class="language-plaintext highlighter-rouge">navigator.requestMIDIAccess({ sysex: true })</code> is called, a dialog first prompts the user to grant the application the right to <a href="https://blog.landr.com/midi-sysex/">send SysEx (System Exclusive) MIDI messages</a>.</p>

<p>By contrast, in Firefox 99+, the call to <code class="language-plaintext highlighter-rouge">navigator.requestMIDIAccess()</code> ALWAYS fails (again, except on <code class="language-plaintext highlighter-rouge">localhost</code>) until the user has explicitly downloaded and installed a “site permission” add-on that requests the permission to access Web MIDI API on your app’s behalf. Once installed, the add-on will automatically prompt the user for this permission.</p>

<p>To make this work, you need to:</p>
<ul>
  <li><a href="https://extensionworkshop.com/documentation/publish/site-permission-add-on/">Request the site permission add-on</a> using your Firefox developer account.</li>
</ul>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/webmidi-addon.jpg">
      <img src="/assets/webmidi-addon.jpg" style="max-width: 100%;" alt="" />
    </a>
    <figcaption></figcaption>
  </figure>
</div>

<ul>
  <li>Host the add-on that is generated for you in the same domain as your app, and make it accessible for download - it’s a <code class="language-plaintext highlighter-rouge">.xpi</code> file and a regular <code class="language-plaintext highlighter-rouge">&lt;a href&gt;</code> tag will do fine.</li>
  <li>Detect a permission error upon calling <code class="language-plaintext highlighter-rouge">navigator.requestMIDIAccess()</code> and detect that Firefox is the user agent.</li>
  <li>Show a message on your app that the user needs to a) download and install the add-on above, and b) refresh the page once they have installed it and granted the permission to use Web MIDI. Something like this:</li>
</ul>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/webmidi-message.jpg">
      <img src="/assets/webmidi-message.jpg" style="max-width: 100%;" alt="" />
    </a>
    <figcaption></figcaption>
  </figure>
</div>

<p>Can your app detect that the permission has been granted to avoid a manual refresh? No, <a href="https://extensionworkshop.com/documentation/publish/site-permission-add-on/#:~:text=However%2C%20there%20is%20no%20alert%20provided%20to%20your%20website%20that%20the%20extension%20has%20been%20installed.%20So%2C%20after%20offering%20the%20add%2Don%20for%20installation%20you%20should%20ask%20the%20user%20to%20try%20granting%20permission%20again.">says the documentation</a>:</p>

<blockquote>
  <p>However, there is no alert provided to your website that the extension has been installed. So, after offering the add-on for installation you should ask the user to try granting permission again.</p>
</blockquote>

<p>What happens next is out of your control:</p>
<ul>
  <li>The user downloads and installs the add-on.</li>
</ul>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/webmidi-install-1.jpg">
      <img src="/assets/webmidi-install-1.jpg" style="max-width: 100%;" alt="" />
    </a>
    <figcaption></figcaption>
  </figure>
</div>

<ul>
  <li>Firefox shows a second prompt to enable Web MIDI, which the user needs to accept as well.</li>
</ul>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/webmidi-install-2.jpg">
      <img src="/assets/webmidi-install-2.jpg" style="max-width: 100%;" alt="" />
    </a>
    <figcaption></figcaption>
  </figure>
</div>

<ul>
  <li>The user refreshes the app page. This time, the call to <code class="language-plaintext highlighter-rouge">navigator.requestMIDIAccess()</code> will succeed and Web MIDI will be enabled :clap:</li>
</ul>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/webmidi-outputs.jpg">
      <img src="/assets/webmidi-outputs.jpg" style="max-width: 100%;" alt="" />
    </a>
    <figcaption></figcaption>
  </figure>
</div>

<h2 id="initialization-code">Initialization code</h2>
<p>In my <a href="https://blog.karimratib.me/demos/musicxml/">MusicXML player demo</a>, the initialization code handles 3 conditions related to <code class="language-plaintext highlighter-rouge">navigator.requestMIDIAccess()</code>:</p>
<ul>
  <li>The function does not exist, indicating an old browser that does not support Web MIDI at all. MIDI functionality will be disabled in this case.</li>
  <li>A permission error, in which case I check for Firefox user agent and show the add-on download message.</li>
  <li>A successful invocation, in which case Web MIDI is enabled.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">if </span><span class="p">(</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">requestMIDIAccess</span><span class="p">)</span> <span class="nb">navigator</span><span class="p">.</span><span class="nf">requestMIDIAccess</span><span class="p">({</span> <span class="na">sysex</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">midiAccess</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">firefox-midi</span><span class="dl">'</span><span class="p">).</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">hide</span><span class="dl">'</span><span class="p">);</span>
    <span class="c1">// MIDI initialization here...</span>
  <span class="p">},</span> <span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">isFirefox</span> <span class="o">=</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nf">toLowerCase</span><span class="p">().</span><span class="nf">indexOf</span><span class="p">(</span><span class="dl">'</span><span class="s1">firefox</span><span class="dl">'</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">isFirefox</span><span class="p">)</span> <span class="p">{</span>
      <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">firefox-midi</span><span class="dl">'</span><span class="p">).</span><span class="nx">classList</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="dl">'</span><span class="s1">hide</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div></div>

<h2 id="debugging-hints">Debugging hints</h2>
<p>You will likely need to iterate on your permission-handling logic and user messaging. I’ve found that a good way is to remove the site permission add-on from <code class="language-plaintext highlighter-rouge">about:addons</code> (in the “Site Permissions” tab). When you reload your app, you’ll be able to restart the permissioning process from scratch.</p>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/webmidi-addons.jpg">
      <img src="/assets/webmidi-addons.jpg" style="max-width: 100%;" alt="" />
    </a>
    <figcaption></figcaption>
  </figure>
</div>

<p>Another way is to remove the “Access MIDI devices with SysEx support” permission from the site settings - note that I was unable to find a way to distinguish between the absence of site permission add-on, versus the user disallowing the use of Web MIDI.</p>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/webmidi-permissions.jpg">
      <img src="/assets/webmidi-permissions.jpg" style="max-width: 100%;" alt="" />
    </a>
    <figcaption></figcaption>
  </figure>
</div>

<p>That’s it! Happy music coding :saxophone:</p>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><summary type="html"><![CDATA[Changelog Nov 20, 2022 OBSOLETE! Firefox no longer requires the complicated process outlined below to enable Web MIDI and now behaves like Chrome does. I am only keeping this post for posterity. In this note, I explain the process of preparing your Web application to use Wed MIDI API on Firefox, because this process is different from Chrome and involves a few more steps that may be counter-intuitive or surprising. I include screenshots and code snippets from my own app.]]></summary></entry></feed>