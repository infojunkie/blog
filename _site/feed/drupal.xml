<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.karimratib.me/feed/drupal.xml" rel="self" type="application/atom+xml" /><link href="https://blog.karimratib.me/" rel="alternate" type="text/html" /><updated>2025-05-21T16:57:30-07:00</updated><id>https://blog.karimratib.me/feed/drupal.xml</id><title type="html">infojunkie | Drupal</title><subtitle></subtitle><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><entry><title type="html">Drupal 10: Fix AJAX-related error with Views exposed forms</title><link href="https://blog.karimratib.me/2025/05/21/drupal-ajax-views-exposed-filters.html" rel="alternate" type="text/html" title="Drupal 10: Fix AJAX-related error with Views exposed forms" /><published>2025-05-21T00:00:00-07:00</published><updated>2025-05-21T00:00:00-07:00</updated><id>https://blog.karimratib.me/2025/05/21/drupal-ajax-views-exposed-filters</id><content type="html" xml:base="https://blog.karimratib.me/2025/05/21/drupal-ajax-views-exposed-filters.html"><![CDATA[<p>I don’t mind fixing the bugs that I or my team introduce into our codebase - those bugs are expected and par for the course. But bugs in Drupal core are totally unacceptable!! /s</p>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/what-me-entitled.jpg">
      <img src="/assets/what-me-entitled.jpg" style="max-width: 100%;" alt="In reality, these blog posts are just excuses for me to make more silly memes." />
    </a>
    <figcaption>In reality, these blog posts are just excuses for me to make more silly memes.</figcaption>
  </figure>
</div>

<p>This one was pretty confusing. I needed to dynamically update a drop-down every time a “parent” drop-down changed (think 2-level taxonomy vocabulary), which is a <a href="https://www.drupal.org/docs/develop/drupal-apis/javascript-api/ajax-forms">well-documented feature in the Forms API</a>. In a nutshell, the parent element gets an <code class="language-plaintext highlighter-rouge">#ajax</code> callback that is called upon user interaction, and that returns the updated child element from the <code class="language-plaintext highlighter-rouge">$form</code> structure. The Drupal AJAX frontend code takes care of replacing the child element in the HTML form. Neat and simple. In my case, though, I needed this behaviour in a Views exposed form, and that’s when the trouble started. When changing the parent element, the callback was not being called, and instead, an unrelated error was displayed, saying <code class="language-plaintext highlighter-rouge">An unrecoverable error occurred. The uploaded file likely exceeded the maximum file size (XXX) that this server supports</code>.</p>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/views-ajax-exception.gif">
      <img src="/assets/views-ajax-exception.gif" style="max-width: 100%;" alt="Hi Drupal, which uploaded file are you talking about?" />
    </a>
    <figcaption>Hi Drupal, which uploaded file are you talking about?</figcaption>
  </figure>
</div>

<p>Fortunately, I was able to find <a href="https://www.drupal.org/project/drupal/issues/2658718">an existing issue</a> (submitted in Jan 2016 :sob:) which was useful to confirm I was not vastly misunderstanding the problem. The workarounds mentioned in this ticket did not work for me, though, so I had to keep digging on my own. Here’s the result of my analysis:</p>

<h2 id="why-this-error">Why this error?</h2>
<p>The displayed error has absolutely nothing to do with the situation I was facing: There’s no uploaded file at play, and there’s not even a <code class="language-plaintext highlighter-rouge">POST</code>‘ed form, since the AJAX request uses the <code class="language-plaintext highlighter-rouge">GET</code> method. To find the source of an error, I usually start by locating the text of the error in the codebase and work backwards up the call stack - in this case, it is thrown by <code class="language-plaintext highlighter-rouge">FormAjaxSubscriber::onException</code> which is itself triggered by <a href="https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Form%21FormBuilder.php/function/FormBuilder%3A%3AbuildForm/10"><code class="language-plaintext highlighter-rouge">FormBuilder::buildForm</code></a> under an unexpected condition:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// In case the post request exceeds the configured allowed size</span>
    <span class="c1">// (post_max_size), the post request is potentially broken. Add some</span>
    <span class="c1">// protection against that and at the same time have a nice error message.</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$ajax_form_request</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'form_id'</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">BrokenPostRequestException</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getFileUploadMaxSize</span><span class="p">());</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>I don’t know about you, but to me the condition of a missing <code class="language-plaintext highlighter-rouge">form_id</code> seems unrelated to a file limit issue. By examining the AJAX <code class="language-plaintext highlighter-rouge">GET</code> request in the browser, I was able to verify that no <code class="language-plaintext highlighter-rouge">form_id</code> query argument is actually sent - which means that further down this function, the form builder will be unable to find the form object that should be built. Looks like a legitimate error and the AJAX frontend seems be be at fault.</p>

<h2 id="the-workaround-needed-a-workaround">The workaround needed a workaround</h2>
<p>At this point, I had the choice of debugging and fixing the <a href="https://git.drupalcode.org/project/drupal/-/blob/10.5.x/core/misc/ajax.js">Drupal AJAX frontend code</a>, or find a workaround that would allow me to keep working on my business feature. Although I am a firm believer that we should allocate some of our time to participate in fixing Drupal core issues, this seemed a deeper dive than I could afford at that point. Instead, I opted for the most generic workaround that I could reuse in similar future scenarios. Here’s what I came with:</p>

<p>The general idea is to simply send the missing <code class="language-plaintext highlighter-rouge">form_id</code> in the AJAX request. The <a href="https://www.drupal.org/docs/develop/drupal-apis/javascript-api/ajax-forms#s-full-list-of-available-ajax-properties">Form API <code class="language-plaintext highlighter-rouge">#ajax</code> properties</a> helpfully include a customizable <code class="language-plaintext highlighter-rouge">url</code> entry, so I decided to augment the current URL with the <code class="language-plaintext highlighter-rouge">form_id</code> query argument. Something like that, maybe?</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">my_module_form_views_exposed_form_alter</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$form</span><span class="p">,</span> <span class="nc">FormStateInterface</span> <span class="nv">$form_state</span><span class="p">,</span> <span class="nv">$form_id</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// DANGER: THIS WILL NOT WORK!</span>
    <span class="nv">$uri</span> <span class="o">=</span> <span class="nc">\Drupal\Component\Utility\UrlHelper</span><span class="o">::</span><span class="nf">parse</span><span class="p">(</span><span class="nc">\Drupal</span><span class="o">::</span><span class="nf">request</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getRequestUri</span><span class="p">());</span>
    <span class="nv">$uri</span><span class="p">[</span><span class="s1">'query'</span><span class="p">][</span><span class="s1">'form_id'</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$form</span><span class="p">[</span><span class="s1">'#id'</span><span class="p">];</span>
    <span class="nv">$uri</span><span class="p">[</span><span class="s1">'query'</span><span class="p">][</span><span class="s1">'ajax_form'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nv">$form</span><span class="p">[</span><span class="s1">'my_parent_element'</span><span class="p">][</span><span class="s1">'#ajax'</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
      <span class="s1">'callback'</span> <span class="o">=&gt;</span> <span class="s1">'my_parent_element_callback'</span><span class="p">,</span>
      <span class="s1">'wrapper'</span> <span class="o">=&gt;</span> <span class="s1">'my-parent-element-container'</span><span class="p">,</span>
      <span class="s1">'url'</span> <span class="o">=&gt;</span> <span class="nc">Url</span><span class="o">::</span><span class="nf">fromUri</span><span class="p">(</span><span class="s1">'internal:'</span> <span class="mf">.</span> <span class="nv">$uri</span><span class="p">[</span><span class="s1">'path'</span><span class="p">],</span> <span class="p">[</span><span class="s1">'query'</span> <span class="o">=&gt;</span> <span class="nv">$uri</span><span class="p">[</span><span class="s1">'query'</span><span class="p">],</span> <span class="s1">'fragment'</span> <span class="o">=&gt;</span> <span class="nv">$uri</span><span class="p">[</span><span class="s1">'fragment'</span><span class="p">]]),</span>
    <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
<p>If only things were that simple! This did not work - the AJAX request kept missing ALL query arguments after this change. How on earth could <code class="language-plaintext highlighter-rouge">URL</code> options get ignored?? More hours, more digging revealed <a href="https://git.drupalcode.org/project/drupal/-/blob/10.5.x/core/lib/Drupal/Core/Render/Element/RenderElementBase.php#L381-388">this code deep inside <code class="language-plaintext highlighter-rouge">RenderElementBase::preRenderAjaxForm</code></a> - someone decided to overwrite the incoming URL options with those from another key THAT IS NOT EVEN DOCUMENTED :angry: I’m sure it seemed like a good idea at the time :angel:</p>

<p>So the final code looks like:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">my_module_form_views_exposed_form_alter</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$form</span><span class="p">,</span> <span class="nc">FormStateInterface</span> <span class="nv">$form_state</span><span class="p">,</span> <span class="nv">$form_id</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Override the AJAX request to include `form_id` and `ajax_form`.</span>
    <span class="nv">$uri</span> <span class="o">=</span> <span class="nc">\Drupal\Component\Utility\UrlHelper</span><span class="o">::</span><span class="nf">parse</span><span class="p">(</span><span class="nc">\Drupal</span><span class="o">::</span><span class="nf">request</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getRequestUri</span><span class="p">());</span>
    <span class="nv">$uri</span><span class="p">[</span><span class="s1">'query'</span><span class="p">][</span><span class="s1">'form_id'</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$form</span><span class="p">[</span><span class="s1">'#id'</span><span class="p">];</span>
    <span class="nv">$uri</span><span class="p">[</span><span class="s1">'query'</span><span class="p">][</span><span class="s1">'ajax_form'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nv">$form</span><span class="p">[</span><span class="s1">'my_parent_element'</span><span class="p">][</span><span class="s1">'#ajax'</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
      <span class="s1">'callback'</span> <span class="o">=&gt;</span> <span class="s1">'my_parent_element_callback'</span><span class="p">,</span>
      <span class="s1">'wrapper'</span> <span class="o">=&gt;</span> <span class="s1">'my-parent-element-container'</span><span class="p">,</span>
      <span class="s1">'url'</span> <span class="o">=&gt;</span> <span class="nc">Url</span><span class="o">::</span><span class="nf">fromUri</span><span class="p">(</span><span class="s1">'internal:'</span> <span class="mf">.</span> <span class="nv">$uri</span><span class="p">[</span><span class="s1">'path'</span><span class="p">]),</span>
      <span class="s1">'options'</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'query'</span> <span class="o">=&gt;</span> <span class="nv">$uri</span><span class="p">[</span><span class="s1">'query'</span><span class="p">],</span> <span class="s1">'fragment'</span> <span class="o">=&gt;</span> <span class="nv">$uri</span><span class="p">[</span><span class="s1">'fragment'</span><span class="p">]]</span>
    <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And this, my friends, is how I fixed the file size limit error that occurs on AJAXified Views exposed form elements :tada:</p>

<h2 id="sober-concluding-thoughts">Sober concluding thoughts</h2>
<p>In a codebase as large as Drupal’s, it is normal to expect inconsistencies and edge cases. Since this is the second issue that involves Views exposed forms (the first one being an <a href="/2024/08/29/drupal-bigpipe-reset.html">unwanted interaction with Big Pipe</a>), I am now expecting more bugs to emanate from this area - namely, the intersection between Views exposed forms and advanced Drupal features. I wonder if anyone’s done an analysis of open Drupal issues to find clusters of bugs based on Drupal core components or recurring keywords.</p>

<p>In this particular case, the error that Drupal reports is not only useless, it is actively misleading. This is not particularly unusual, as error handling is notoriously one of the harder aspect of programming, and much <a href="https://www.google.com/search?q=error+handling+in+software+development">virtual ink has been spilled to try to make sense of it</a>. What should be reported to the user? What should be logged? What should be handled silently? As a software architect who interacts a lot with business users, I can tell you that core Drupal has its own share of confusing and unhelpful error messages. The most egregious one for me is the infamous message <code class="language-plaintext highlighter-rouge">An illegal choice has been detected. Please contact the site administrator.</code> which only serves to confuse users but offers them no help. In our own software process, I make sure to review the errors thrown by the developers and ask myself the following questions in each case:</p>

<ul>
  <li><strong>UX (User eXperience)</strong>: Should end users see an error, a warning, or should the UI keep functioning silently? What information will best help end users to accomplish their task at hand?</li>
  <li><strong>DX (Developer eXperience)</strong>: Should site builders see an error, a warning, or should the application keep functioning silently? What information will best help site builders to develop the application?</li>
  <li><strong>DevOps</strong>: Should system engineers see an error, a warning, or should the system keep functioning silently? What information will best help system engineers to manage the site’s operation?</li>
</ul>

<p>The detail about the <code class="language-plaintext highlighter-rouge">URL</code> options being overridden by an undocumented <code class="language-plaintext highlighter-rouge">['#ajax']['options']</code> key illustrates the difficulty of keeping documentation in sync with the code, but also illustrates the importance of thinking about DX when designing APIs, to minimize surprises and inconsistencies which directly translate to bugs or wasted effort.</p>

<p>In the spirit of contributing something back, I <a href="https://www.drupal.org/project/drupal/issues/2658718#comment-16099799">added to my workaround to the original issue</a>, hoping it will help someone and thereby entangling me to the issue’s fate!</p>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[Enabling AJAX callbacks on Views exposed forms causes a cryptic error that "the uploaded file likely exceeded the maximum file size". In this post, I explain why this happens, and present a functioning workaround.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.karimratib.me/assets/what-me-entitled.jpg" /><media:content medium="image" url="https://blog.karimratib.me/assets/what-me-entitled.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Drupal 10: Fix Views Reset button with Big Pipe</title><link href="https://blog.karimratib.me/2024/08/29/drupal-bigpipe-reset.html" rel="alternate" type="text/html" title="Drupal 10: Fix Views Reset button with Big Pipe" /><published>2024-08-29T00:00:00-07:00</published><updated>2024-08-29T00:00:00-07:00</updated><id>https://blog.karimratib.me/2024/08/29/drupal-bigpipe-reset</id><content type="html" xml:base="https://blog.karimratib.me/2024/08/29/drupal-bigpipe-reset.html"><![CDATA[<p>I was <strong>flabbergasted</strong> to discover that Big Pipe breaks the Views Reset button. In fact, Big Pipe breaks <strong>all</strong> form redirects. Not sure how other Drupal devs feel about that, but this was a big smh moment for me. Just imagine the collective time wasted debugging one’s code until one associates this failure to a core module bug!! :facepalm:</p>

<p>Now that my rant’s over, let’s get into the technical details of this story.</p>

<h2 id="detecting-the-bug">Detecting the bug</h2>
<p>The tell-tale sign that you hit this bug is when you enable the Reset button on a view’s exposed form, and instead of resetting the view filters, you get a blank page. The log says something like:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Drupal\Core\Form\EnforcedResponseException: in Drupal\Core\Form\FormBuilder-&gt;buildForm() (line 357 of /var/www/html/web/core/lib/Drupal/Core/Form/FormBuilder.php)
#0 /var/www/html/web/core/modules/views/src/Plugin/views/exposed_form/ExposedFormPluginBase.php(134): Drupal\Core\Form\FormBuilder-&gt;buildForm()
#1 /var/www/html/web/core/modules/views/src/ViewExecutable.php(1243): Drupal\views\Plugin\views\exposed_form\ExposedFormPluginBase-&gt;renderExposedForm()
</code></pre></div></div>

<h2 id="solution-1-applying-the-patch">Solution 1: Applying the patch</h2>
<p>The <a href="https://www.drupal.org/project/drupal/issues/3304746">relevant bug report</a> has a patch that worked for me. I had to apply the patch manually to Drupal 9.x (please, don’t shoot me because I’m not in charge of our Drupal update schedule!!) but the code changes are exactly the same.</p>

<p>When you apply this patch, the Reset button works again. But clumsily: First, you see the URL changing to your current filters followed by <code class="language-plaintext highlighter-rouge">&amp;op=Reset</code>, then the browser redirects to the page’s bare URL, thereby resetting the filters. This is of course a consequence of using Big Pipe, which optimizes page rendering by returning all cached blocks first, and deferring uncacheable blocks to be requested by the front-end. A marvel of engineering by <strong>Wim Leers</strong>! Still, the flickering leaves to be desired.</p>

<p>In my case, this particular view is the principal component of the page, so I feel OK disabling Big Pipe for just this page if at all possible. But how?</p>

<h2 id="solution-2a-disable-big-pipe-for-a-specific-route">Solution 2a: Disable Big Pipe for a specific route</h2>
<p>The standard approach to disabling Big Pipe is to inject the setting <code class="language-plaintext highlighter-rouge">_no_big_pipe: TRUE</code> in the options of the relevant route. If your page’s route is unique, then all you need is to follow the official guide on <a href="https://www.drupal.org/docs/drupal-apis/routing-system/altering-existing-routes-and-adding-new-routes-based-on-dynamic-ones#s-altering-existing-routes">altering existing routes</a>. Specifically, for a view page, the route is of the form <code class="language-plaintext highlighter-rouge">view.view_id.page_id</code>. So you would have something like the following:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">protected</span> <span class="k">function</span> <span class="n">alterRoutes</span><span class="p">(</span><span class="kt">RouteCollection</span> <span class="nv">$collection</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// Disable Big Pipe for my view.</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$route</span> <span class="o">=</span> <span class="nv">$collection</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'view.view_id.page_id'</span><span class="p">))</span> <span class="p">{</span>
      <span class="nv">$route</span><span class="o">-&gt;</span><span class="nf">setOption</span><span class="p">(</span><span class="s1">'_no_big_pipe'</span><span class="p">,</span> <span class="kc">TRUE</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="p">}</span>
</code></pre></div></div>

<p>But in my case, the view is a block that’s embedded in a node page. I cannot simply alter the route <code class="language-plaintext highlighter-rouge">entity.node.canonical</code>, because this would disable it on 99% of the site!!</p>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/disable-bigpipe.jpg">
      <img src="/assets/disable-bigpipe.jpg" style="max-width: 100%;" alt="What do you mean, my memes are obsolete??" />
    </a>
    <figcaption>What do you mean, my memes are obsolete??</figcaption>
  </figure>
</div>

<h1 id="solution-2b-disable-big-pipe-for-a-specific-url">Solution 2b: Disable Big Pipe for a specific URL</h1>
<p>I turned to good old <a href="https://drupal.stackexchange.com/q/320680/767">Stack Overflow (technically, Drupal Answers)</a> to query the hive-mind. Thanks to the ever-helpful and super-knowledgeable <strong>4uk4</strong> for his suggestion! Although I ended up taking a different approach, I will remember that I can override parameterized routes with specific ones because this will surely come in handy in the future.</p>

<p>The approach I ended up following is based on Wim Leer’s <a href="https://git.drupalcode.org/project/big_pipe_demo">Big Pipe Strategy demo</a>, where he catches every request in real-time and decides whether to return the Big Pipe placeholders or to ignore them. In my case, instead of examining the request’s query arguments for a specific “disable” signal, I compare the URI itself with the target page’s URL:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">public</span> <span class="k">function</span> <span class="n">processPlaceholders</span><span class="p">(</span><span class="kt">array</span> <span class="nv">$placeholders</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// Ignore Big Pipe for my page URL.</span>
    <span class="nv">$current_uri</span> <span class="o">=</span> <span class="nc">\Drupal</span><span class="o">::</span><span class="nf">request</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getRequestUri</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="nf">str_starts_with</span><span class="p">(</span><span class="nv">$current_uri</span><span class="p">,</span> <span class="s1">'/path/to/page-to-ignore'</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">[];</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">bigPipeStrategy</span><span class="o">-&gt;</span><span class="nf">processPlaceholders</span><span class="p">(</span><span class="nv">$placeholders</span><span class="p">);</span>
  <span class="p">}</span>
</code></pre></div></div>
<p>Et voilà ! Another bug bites the dust.</p>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[Big Pipe on Drupal 9+ breaks form redirects. In this post, I explain how I fixed it for a specific but common case.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.karimratib.me/assets/disable-bigpipe.jpg" /><media:content medium="image" url="https://blog.karimratib.me/assets/disable-bigpipe.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Drupal 10: From cookies to user sessions</title><link href="https://blog.karimratib.me/2024/08/20/drupal-sessions.html" rel="alternate" type="text/html" title="Drupal 10: From cookies to user sessions" /><published>2024-08-20T00:00:00-07:00</published><updated>2024-08-20T00:00:00-07:00</updated><id>https://blog.karimratib.me/2024/08/20/drupal-sessions</id><content type="html" xml:base="https://blog.karimratib.me/2024/08/20/drupal-sessions.html"><![CDATA[<p>When you need to examine user session tokens, you know you’re deep in the bowels of the CMS. That’s what happened to me recently, as I was debugging why CloudFlare was mixing up user sessions and giving admin access to otherwise unpermissioned users :scream:</p>

<p>To help debug this, I needed a way to associate user cookies with entries from the <code class="language-plaintext highlighter-rouge">sessions</code> table. I wrote a drush script to do exactly that: Given the value of the SESSXXX cookie in your browser, the script will find the corresponding <code class="language-plaintext highlighter-rouge">sessions</code> entry and dump its information, decoding the session metadata in the process:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>drush scr export_sessions.php <span class="nt">--</span> <span class="nt">--cookie</span><span class="o">=</span>5XvW3NGG8q1PcCrEXn676THvQBitaUwDiPw8XzAgXtihV43u
</code></pre></div></div>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"uid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"-Xcm0ar3mWcMhIhhBANA3K-jUx3JNOsu190LPEUzIN8"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"hostname"</span><span class="p">:</span><span class="w"> </span><span class="s2">"172.24.0.1"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"timestamp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1724179990"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"session"</span><span class="p">:</span><span class="w"> </span><span class="s2">"_sf2_attributes|a:1:{s:3:</span><span class="se">\"</span><span class="s2">uid</span><span class="se">\"</span><span class="s2">;s:1:</span><span class="se">\"</span><span class="s2">1</span><span class="se">\"</span><span class="s2">;}_sf2_meta|a:4:{s:1:</span><span class="se">\"</span><span class="s2">u</span><span class="se">\"</span><span class="s2">;i:1724179990;s:1:</span><span class="se">\"</span><span class="s2">c</span><span class="se">\"</span><span class="s2">;i:1723574737;s:1:</span><span class="se">\"</span><span class="s2">l</span><span class="se">\"</span><span class="s2">;i:2000000;s:1:</span><span class="se">\"</span><span class="s2">s</span><span class="se">\"</span><span class="s2">;s:43:</span><span class="se">\"</span><span class="s2">OCpNT7IvSsWNfPeYXam7E7XFPTKqb-8qWPUTMe8MFlQ</span><span class="se">\"</span><span class="s2">;}"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"sf2"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"attributes"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"uid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"meta"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"u"</span><span class="p">:</span><span class="w"> </span><span class="mi">1724179990</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"c"</span><span class="p">:</span><span class="w"> </span><span class="mi">1723574737</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"l"</span><span class="p">:</span><span class="w"> </span><span class="mi">2000000</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"s"</span><span class="p">:</span><span class="w"> </span><span class="s2">"OCpNT7IvSsWNfPeYXam7E7XFPTKqb-8qWPUTMe8MFlQ"</span><span class="w">
                </span><span class="p">}</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>The same script will dump ALL sessions if you don’t pass in a cookie value. Here’s the source code of <code class="language-plaintext highlighter-rouge">export_sessions.php</code>:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="cd">/**
 * Retrieve session entry for given cookie.
 * Based on https://drupal.stackexchange.com/a/231726/767
 */</span>

<span class="kn">use</span> <span class="nc">Drupal\Component\Utility\Crypt</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$extra</span><span class="p">))</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nf">str_starts_with</span><span class="p">(</span><span class="nv">$extra</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s1">'--cookie='</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">die</span><span class="p">(</span><span class="s2">"Usage: drush scr export_sessions.php [-- --cookie=&lt;value of SESSxxxx cookie&gt;]</span><span class="se">\n</span><span class="s2">"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span>
    <span class="nv">$cookie</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nb">str_replace</span><span class="p">(</span><span class="s1">'--cookie='</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="nv">$extra</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span>
    <span class="nv">$cookie</span> <span class="o">=</span> <span class="nb">urldecode</span><span class="p">(</span><span class="nv">$cookie</span><span class="p">);</span>
    <span class="nv">$sid</span> <span class="o">=</span> <span class="nc">Crypt</span><span class="o">::</span><span class="nf">hashBase64</span><span class="p">(</span><span class="nv">$cookie</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$connection</span> <span class="o">=</span> <span class="nc">\Drupal</span><span class="o">::</span><span class="nf">database</span><span class="p">();</span>
<span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$sid</span><span class="p">))</span> <span class="p">{</span>
  <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="nf">query</span><span class="p">(</span><span class="s1">'SELECT * FROM {sessions} WHERE sid = :sid'</span><span class="p">,</span> <span class="p">[</span><span class="s1">':sid'</span> <span class="o">=&gt;</span> <span class="nv">$sid</span><span class="p">]);</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
  <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="nf">query</span><span class="p">(</span><span class="s1">'SELECT * FROM {sessions}'</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">echo</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nb">array_map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$session</span><span class="p">)</span> <span class="p">{</span>
  <span class="nb">preg_match_all</span><span class="p">(</span><span class="s1">'/_sf2_(\w+)\|/'</span><span class="p">,</span> <span class="nv">$session</span><span class="o">-&gt;</span><span class="n">session</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">,</span> <span class="no">PREG_OFFSET_CAPTURE</span> <span class="o">|</span> <span class="no">PREG_SET_ORDER</span><span class="p">);</span>
  <span class="nv">$session</span><span class="o">-&gt;</span><span class="n">sf2</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$match</span><span class="p">,</span> <span class="nv">$index</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$session</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$offset</span> <span class="o">=</span> <span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nv">$length</span> <span class="o">=</span> <span class="nv">$index</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$matches</span><span class="p">)</span> <span class="o">?</span>
      <span class="nv">$matches</span><span class="p">[</span><span class="nv">$index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$offset</span><span class="o">:</span>
      <span class="nb">strlen</span><span class="p">(</span><span class="nv">$session</span><span class="o">-&gt;</span><span class="n">session</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
    <span class="k">return</span> <span class="p">[</span>
      <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="nv">$match</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span>
      <span class="s1">'value'</span> <span class="o">=&gt;</span> <span class="nb">unserialize</span><span class="p">(</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$session</span><span class="o">-&gt;</span><span class="n">session</span><span class="p">,</span> <span class="nv">$offset</span><span class="p">,</span> <span class="nv">$length</span><span class="p">)),</span>
    <span class="p">];</span>
  <span class="p">},</span> <span class="nv">$matches</span><span class="p">,</span> <span class="nb">array_keys</span><span class="p">(</span><span class="nv">$matches</span><span class="p">));</span>
  <span class="k">return</span> <span class="nv">$session</span><span class="p">;</span>
<span class="p">},</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="nf">fetchAll</span><span class="p">()),</span> <span class="no">JSON_PRETTY_PRINT</span><span class="p">)</span> <span class="mf">.</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span>
</code></pre></div></div>
<p>That’s it. Short and sweet! :candy:</p>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[In this post, I show a script that relates user cookies to Drupal session information.]]></summary></entry><entry><title type="html">Drupal 9: Troubleshooting Cache API issues, Part 1: Xdebug, wodby/drupal, VS Code</title><link href="https://blog.karimratib.me/2023/10/25/xdebug.html" rel="alternate" type="text/html" title="Drupal 9: Troubleshooting Cache API issues, Part 1: Xdebug, wodby/drupal, VS Code" /><published>2023-10-25T00:00:00-07:00</published><updated>2023-10-25T00:00:00-07:00</updated><id>https://blog.karimratib.me/2023/10/25/xdebug</id><content type="html" xml:base="https://blog.karimratib.me/2023/10/25/xdebug.html"><![CDATA[<p>In my 30+ years of programming, my go-to debugging tool has been the judicious usage of <code class="language-plaintext highlighter-rouge">print</code> commands on the appropriate variables at the appropriate times. Of course, <code class="language-plaintext highlighter-rouge">print</code> takes many different forms depending on the technology stack and the application model, but the principle remains the same. In very few cases did this approach fail me, and I stumbled across one such case as I was debugging the notoriously tricky Drupal <a href="https://www.drupal.org/docs/8/api/cache-api/cache-api">Cache API</a>. In a nutshell, there was one module, among the dozens of core, contrib and custom modules making up that particular site, that was invalidating the static page cache and preventing pages from being cached. I wanted to find which module was the culprit.</p>

<p>The problem with this issue is that the Cache API is called thousands of times per request - for pretty much every theming function participating in a page render. Further, the caching logic is complex as it involves combinations of cache tags, <code class="language-plaintext highlighter-rouge">max-age</code> settings, and various other mechanisms that affect the decisions of which caching tables to use and which caching headers to return in the HTTP response.</p>

<p>Trying to pinpoint the particular condition that caused the cache invalidation in this case using <code class="language-plaintext highlighter-rouge">print</code> statements would have been an inefficient and tedious process, and the client wouldn’t have liked to pay for that inefficiency. Kind of like the game of 20 questions, but with incomplete information and many, many decision branches. So I decided to bite the bullet and set up my Xdebug environment to catch the bug red-handed, so to speak. With its pants down, so to speak. To catch it in the act, so to speak.</p>

<p>Here’s a high level diagram of the various components at play here. I slightly modified it from the original at <a href="https://blog.devsense.com/2019/debugging-php-on-docker-with-visual-studio-code">this other tutorial on the same topic</a>.</p>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/xdebug.png">
      <img src="/assets/xdebug.png" style="max-width: 100%;" alt="Xdebug within php-fpm container communicates with VS Code IDE on host via port 9003." />
    </a>
    <figcaption>Xdebug within php-fpm container communicates with VS Code IDE on host via port 9003.</figcaption>
  </figure>
</div>

<p>My development environment is made up of the excellent <a href="https://github.com/wodby/docker4drupal">Docker-based Drupal stack</a> by Wodby. I can’t say enough good things about this framework, which has allowed me to start new Drupal projects, and even adopt legacy ones, on a solid footing without breaking a sweat. The architecture is simple, documentation is clear, customization is easy. I’ve been able to share development environments with team members using macOS and Windows systems with minimal changes.</p>

<p>The <a href="https://github.com/wodby/drupal-php">wodby/drupal-php</a> image comes loaded with the Xdebug extension, and it’s “only” necessary to configure the right environment variables to activate it. I say “only” because many of the settings are non-obvious and required some experimentation before I could get them running, in addition to a VS Code configuration to match.</p>

<p>Here’s my current setup, in the main <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file running the full Drupal stack:</p>
<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="na">php</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">wodby/drupal-php:$PHP_TAG</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">PHP_EXTENSIONS_DISABLE</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span> <span class="c1"># or any value that does NOT include xdebug</span>
      <span class="na">PHP_XDEBUG</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">PHP_XDEBUG_MODE</span><span class="pi">:</span> <span class="s">debug</span>
      <span class="na">PHP_XDEBUG_START_WITH_REQUEST</span><span class="pi">:</span> <span class="s">yes</span>
      <span class="na">PHP_XDEBUG_CLIENT_HOST</span><span class="pi">:</span> <span class="s">host.docker.internal</span>
      <span class="na">PHP_XDEBUG_LOG</span><span class="pi">:</span> <span class="s">/tmp/php-xdebug.log</span>
    <span class="na">extra_hosts</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">host.docker.internal:host-gateway"</span>
</code></pre></div></div>
<p>Here’s what the non-obvious settings mean:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">PHP_EXTENSIONS_DISABLE: ''</code> prevents the PHP container from disabling the <code class="language-plaintext highlighter-rouge">xdebug</code> extension - which for some reason is the default in <a href="https://github.com/wodby/php?tab=readme-ov-file#php-extensions"><code class="language-plaintext highlighter-rouge">wodby/php</code></a>.</li>
  <li><code class="language-plaintext highlighter-rouge">PHP_XDEBUG_MODE: debug</code> enables <a href="https://xdebug.org/docs/step_debug#configure">Xdebug step debugging</a>, which is our purpose here.</li>
  <li><code class="language-plaintext highlighter-rouge">PHP_XDEBUG_START_WITH_REQUEST: yes</code> means that Xdebug is activated at every request, automatically.</li>
  <li><code class="language-plaintext highlighter-rouge">PHP_XDEBUG_CLIENT_HOST: host.docker.internal</code> is the all-important address of the machine running the debugging client - in my case, VS Code on my local machine. <a href="https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host">According to documentation</a>, the name <code class="language-plaintext highlighter-rouge">host.docker.internal</code> is automatically available in Docker 18.03+ Mac/Win, <strong>but not on Linux</strong>. For Linux, we add the stanza <code class="language-plaintext highlighter-rouge">extra_hosts: "host.docker.internal:host-gateway"</code> which maps that domain name to Docker’s gateway IP, which is the Docker host, which is my laptop OS running VS Code :sweat_smile:</li>
</ul>

<p>But that’s only half of the story. The other half is convincing VS Code to act as a debugging client to Xdebug. To do that, we use the <a href="https://marketplace.visualstudio.com/items?itemName=xdebug.php-debug">PHP Debug VS Code extension</a> and we <a href="https://code.visualstudio.com/docs/editor/debugging#_launch-configurations">customize the Launch configurations</a> to add the Xdebug endpoint. Basically, we create a <code class="language-plaintext highlighter-rouge">.vscode/launch.json</code> file in the project root with the following content:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.2.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
   </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Listen for Xdebug"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"php"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="s2">"launch"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">9003</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pathMappings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"/var/www/html/"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/src"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>Here’s what the non-obvious settings mean:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">"port": 9003</code> is the default port that Xdebug hits on the client, and that’s where VS Code should be listening for debug events.</li>
  <li><code class="language-plaintext highlighter-rouge">"pathMappings": { "/var/www/html/": "${workspaceFolder}/src" }</code> maps the Docker filesystem path <code class="language-plaintext highlighter-rouge">/var/www/html</code> where the app resides to the actual host path <code class="language-plaintext highlighter-rouge">"${workspaceFolder}/src"</code> where <code class="language-plaintext highlighter-rouge">${workspaceFolder}</code> is a <a href="https://code.visualstudio.com/docs/editor/variables-reference">VS Code variable</a>.</li>
</ul>

<p>With these in place, it should be now possible to place a breakpoint in, say, <code class="language-plaintext highlighter-rouge">src/web/index.php</code> (the Drupal main entrypoint) and catch every request! Select <strong>Run &gt; Start Debugging</strong> or or click the <strong>Listen for Xdebug</strong> configuration in the bottom status bar. We are finally ready to start debugging the Drupal Cache API :ghost:</p>

<h2 id="troubleshooting">Troubleshooting</h2>
<p>Of course, this setup didn’t come by without many failures and much head-scratching, perhaps even some teeth-clenching. If your 100% guaranteed breakpoint (like one in <code class="language-plaintext highlighter-rouge">src/web/index.php</code>) is not being hit, then it’s time to put on your sleuthing hat :detective:</p>

<p>Check that the Xdebug log is active and connected. Running <code class="language-plaintext highlighter-rouge">docker-compose exec php tail -f /tmp/php-xdebug.log</code> should show messages like:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[112] Log opened at 2023-10-25 06:42:12.885888
[112] [Step Debug] INFO: Connecting to configured address/port: host.docker.internal:9003.
[112] [Step Debug] INFO: Connected to debugging client: host.docker.internal:9003 (through xdebug.client_host/xdebug.client_port). :-)
</code></pre></div></div>
<p>Yes, that final smiley is part of the log :-)</p>

<p>If instead, you see a message like:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tail: can't open '/tmp/php-xdebug.log': No such file or directory
tail: no files
</code></pre></div></div>
<p>Then the Xdebug extension is not active, which could mean <code class="language-plaintext highlighter-rouge">PHP_EXTENSIONS_DISABLE</code> is still set to include <code class="language-plaintext highlighter-rouge">xdebug</code>.</p>

<p>If you see a sad smiley message like:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[112] [Step Debug] ERR: Could not connect to debugging client. Tried: host.docker.internal:9003 (through xdebug.client_host/xdebug.client_port) :-(
</code></pre></div></div>
<p>Then check that a connection can be established between Xdebug and VS Code. Running <code class="language-plaintext highlighter-rouge">docker-compose exec php nc -zv host.docker.internal 9003</code> should return a successful response like:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>host.docker.internal (172.17.0.1:9003) open
</code></pre></div></div>
<p>Anything else is a sign that the Docker container is unable to connect to the host on port 9003. Check your <code class="language-plaintext highlighter-rouge">host.docker.internal</code> name resolution, check the <code class="language-plaintext highlighter-rouge">launch.json</code> port setting, turn it off and on again, talk to your rubber duck - you know the drill!</p>

<h2 id="appendix-annoying-drush-warnings">Appendix: Annoying drush warnings</h2>
<p>With Xdebug activated, you may be bombarded with multiple lines of warnings when running <code class="language-plaintext highlighter-rouge">drush</code> commands, especially when you are not debugging on the IDE side:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[20-Aug-2024 19:10:28 UTC] Xdebug: [Log Files] File '/tmp/php-xdebug.log' could not be opened.
[20-Aug-2024 19:10:28 UTC] Xdebug: [Step Debug] Could not connect to debugging client. Tried: host.docker.internal:9003 (through xdebug.client_host/xdebug.client_port).
</code></pre></div></div>
<p>In this case, you can run <code class="language-plaintext highlighter-rouge">export XDEBUG_MODE=off</code> in the <code class="language-plaintext highlighter-rouge">bash</code> session where you’re running <code class="language-plaintext highlighter-rouge">drush</code>, thereby deactivating Xdebug in the session, and saving a few bits from your eyes :sob:</p>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[In this post, I explain how to configure Xdebug with VS Code in the context of deep Drupal debugging.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.karimratib.me/assets/xdebug.png" /><media:content medium="image" url="https://blog.karimratib.me/assets/xdebug.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Drupal 9: Backup and Migrate - Drush 11 support</title><link href="https://blog.karimratib.me/2023/06/01/backup-migrate-drush.html" rel="alternate" type="text/html" title="Drupal 9: Backup and Migrate - Drush 11 support" /><published>2023-06-01T00:00:00-07:00</published><updated>2023-06-01T00:00:00-07:00</updated><id>https://blog.karimratib.me/2023/06/01/backup-migrate-drush</id><content type="html" xml:base="https://blog.karimratib.me/2023/06/01/backup-migrate-drush.html"><![CDATA[<p>Supporting content migrations across stages is a tricky subject, and most tools I reviewed seemed too fragile or too complex to be delivered to a client. We opted to use a simple workflow based on <a href="https://www.drupal.org/project/backup_migrate">BAM (Backup and Migrate)</a> coupled with config re-synchronization. To help automate the process, I wrote a set of <code class="language-plaintext highlighter-rouge">drush</code> commands that implement BAM backup and restore. It’s been tested extensively, but only with a specific set of sources and destinations, so I am reproducing the current code here until it gets published as a module. One design decision I made was to produce output as JSON, to make it easier for downstream automation.</p>

<p>The typical usage scenario is the following:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>drush bamb default_db private_files
// <span class="o">=&gt;</span> <span class="o">{</span>
//    <span class="s2">"status"</span>: <span class="s2">"success"</span>,
//    <span class="s2">"message"</span>: <span class="s2">"Backup complete."</span>
//<span class="o">}</span>
<span class="nv">$ </span>drush bamls <span class="nt">--files</span><span class="o">=</span>private_files
// <span class="o">=&gt;</span> <span class="o">{</span>
//    <span class="s2">"sources"</span>: <span class="o">[</span>
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"default_db"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"Default Drupal Database"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"DefaultDB"</span>
//        <span class="o">}</span>,
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"entire_site"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"Entire Site (do not use)"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"EntireSite"</span>
//        <span class="o">}</span>,
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"private_files"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"Private Files Directory"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"DrupalFiles"</span>
//        <span class="o">}</span>,
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"public_files"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"Public Files Directory"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"DrupalFiles"</span>
//        <span class="o">}</span>,
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"ssot_database"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"SSoT Database"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"PostgreSQL"</span>
//        <span class="o">}</span>
//    <span class="o">]</span>,
//    <span class="s2">"destinations"</span>: <span class="o">[</span>
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"private_files"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"Private Files Directory"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"Directory"</span>
//        <span class="o">}</span>,
//        <span class="o">{</span>
//            <span class="s2">"id"</span>: <span class="s2">"s3_bucket"</span>,
//            <span class="s2">"label"</span>: <span class="s2">"S3 Bucket"</span>,
//            <span class="s2">"type"</span>: <span class="s2">"awss3"</span>
//        <span class="o">}</span>
//    <span class="o">]</span>,
//    <span class="s2">"files"</span>: <span class="o">{</span>
//        <span class="s2">"private_files"</span>: <span class="o">[</span>
//            <span class="o">{</span>
//                <span class="s2">"id"</span>: <span class="s2">"backup-2023-01-27T15-44-19.sql.gz"</span>,
//                <span class="s2">"filename"</span>: <span class="s2">"prod-2023-01-27T15-44-19.sql.gz"</span>,
//                <span class="s2">"filesize"</span>: 19499222,
//                <span class="s2">"datestamp"</span>: 1674869134
//            <span class="o">}</span>
//        <span class="o">]</span>
//    <span class="o">}</span>
//<span class="o">}</span>
<span class="nv">$ </span>drush bamr default_db private_files backup-2023-01-27T15-44-19.sql.gz
// <span class="o">=&gt;</span> <span class="o">{</span>
//    <span class="s2">"status"</span>: <span class="s2">"success"</span>,
//    <span class="s2">"message"</span>: <span class="s2">"Restore complete."</span>
//<span class="o">}</span>
</code></pre></div></div>

<p>And here’s the source for the command:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">namespace</span> <span class="nn">Drush\Commands</span><span class="p">;</span>

<span class="kn">use</span> <span class="nc">Drush\Drush</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Drush\Commands\DrushCommands</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Drush\Boot\DrupalBootLevels</span><span class="p">;</span>
<span class="kn">use</span> <span class="nf">Drupal\backup_migrate</span><span class="nc">\Core\Destination\ListableDestinationInterface</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Symfony\Component\Console\Input\InputOption</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">BackupMigrateCommands</span> <span class="kd">extends</span> <span class="nc">DrushCommands</span>
<span class="p">{</span>
    <span class="cd">/**
     * List sources and destinations.
     *
     * @command backup_migrate:list
     * @aliases bamls
     *
     * @option sources Flag to list sources (default: yes, use --no-sources to hide)
     * @option destinations Flag to list destinations (default: yes, use --no-destinations to hide)
     * @option files Flag to list files for a comma-separated list of destination identifiers (default: none)
     *
     * @param options
     *
     * @return string JSON listing of sources, destinations, files
     *
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">list</span><span class="p">(</span><span class="kt">array</span> <span class="nv">$options</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">'sources'</span> <span class="o">=&gt;</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s1">'destinations'</span> <span class="o">=&gt;</span> <span class="kc">true</span><span class="p">,</span>
        <span class="s1">'files'</span> <span class="o">=&gt;</span> <span class="nc">InputOption</span><span class="o">::</span><span class="no">VALUE_REQUIRED</span><span class="p">,</span>
    <span class="p">])</span><span class="o">:</span> <span class="n">string</span> <span class="p">{</span>
        <span class="nc">Drush</span><span class="o">::</span><span class="nf">bootstrapManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">doBootstrap</span><span class="p">(</span><span class="nc">DrupalBootLevels</span><span class="o">::</span><span class="no">FULL</span><span class="p">);</span>
        <span class="nv">$bam</span> <span class="o">=</span> <span class="nf">\backup_migrate_get_service_object</span><span class="p">();</span>
        <span class="nv">$output</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$options</span><span class="p">[</span><span class="s1">'sources'</span><span class="p">])</span> <span class="p">{</span>
            <span class="nv">$output</span><span class="p">[</span><span class="s1">'sources'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">array_reduce</span><span class="p">(</span><span class="nb">array_keys</span><span class="p">(</span><span class="nv">$bam</span><span class="o">-&gt;</span><span class="nf">sources</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getAll</span><span class="p">()),</span> <span class="k">function</span><span class="p">(</span><span class="nv">$sources</span><span class="p">,</span> <span class="nv">$source_id</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$source</span> <span class="o">=</span> <span class="nc">\Drupal</span><span class="o">::</span><span class="nf">entityTypeManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getStorage</span><span class="p">(</span><span class="s1">'backup_migrate_source'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">load</span><span class="p">(</span><span class="nv">$source_id</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nv">$source</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$sources</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span>
                        <span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="nv">$source_id</span><span class="p">,</span>
                        <span class="s1">'label'</span> <span class="o">=&gt;</span> <span class="nv">$source</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'label'</span><span class="p">),</span>
                        <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="nv">$source</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'type'</span><span class="p">),</span>
                    <span class="p">];</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="nv">$sources</span><span class="p">;</span>
            <span class="p">},</span> <span class="p">[]);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$options</span><span class="p">[</span><span class="s1">'destinations'</span><span class="p">])</span> <span class="p">{</span>
            <span class="nv">$output</span><span class="p">[</span><span class="s1">'destinations'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">array_reduce</span><span class="p">(</span><span class="nb">array_keys</span><span class="p">(</span><span class="nv">$bam</span><span class="o">-&gt;</span><span class="nf">destinations</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getAll</span><span class="p">()),</span> <span class="k">function</span><span class="p">(</span><span class="nv">$destinations</span><span class="p">,</span> <span class="nv">$destination_id</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$destination</span> <span class="o">=</span> <span class="nc">\Drupal</span><span class="o">::</span><span class="nf">entityTypeManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getStorage</span><span class="p">(</span><span class="s1">'backup_migrate_destination'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">load</span><span class="p">(</span><span class="nv">$destination_id</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nv">$destination</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$destinations</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span>
                        <span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="nv">$destination_id</span><span class="p">,</span>
                        <span class="s1">'label'</span> <span class="o">=&gt;</span> <span class="nv">$destination</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'label'</span><span class="p">),</span>
                        <span class="s1">'type'</span> <span class="o">=&gt;</span> <span class="nv">$destination</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'type'</span><span class="p">),</span>
                    <span class="p">];</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="nv">$destinations</span><span class="p">;</span>
            <span class="p">},</span> <span class="p">[]);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$options</span><span class="p">[</span><span class="s1">'files'</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">foreach</span><span class="p">(</span><span class="nb">array_map</span><span class="p">(</span><span class="s1">'trim'</span><span class="p">,</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">','</span><span class="p">,</span> <span class="nv">$options</span><span class="p">[</span><span class="s1">'files'</span><span class="p">]))</span> <span class="k">as</span> <span class="nv">$destination_id</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$destination</span> <span class="o">=</span> <span class="nv">$bam</span><span class="o">-&gt;</span><span class="nf">destinations</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="nv">$destination_id</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$destination</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">logger</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">warning</span><span class="p">(</span><span class="nf">dt</span><span class="p">(</span><span class="s1">'The destination !id does not exist.'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'!id'</span> <span class="o">=&gt;</span> <span class="nv">$destination_id</span><span class="p">]));</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$destination</span> <span class="k">instanceof</span> <span class="nc">ListableDestinationInterface</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">logger</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">warning</span><span class="p">(</span><span class="nf">dt</span><span class="p">(</span><span class="s1">'The destination !id is not listable.'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'!id'</span> <span class="o">=&gt;</span> <span class="nv">$destination_id</span><span class="p">]));</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">try</span> <span class="p">{</span>
                    <span class="nv">$files</span> <span class="o">=</span> <span class="nv">$destination</span><span class="o">-&gt;</span><span class="nf">listFiles</span><span class="p">();</span>
                    <span class="nv">$output</span><span class="p">[</span><span class="s1">'files'</span><span class="p">][</span><span class="nv">$destination_id</span><span class="p">]</span> <span class="o">=</span> <span class="nb">array_reduce</span><span class="p">(</span><span class="nb">array_keys</span><span class="p">(</span><span class="nv">$files</span><span class="p">),</span> <span class="k">function</span><span class="p">(</span><span class="nv">$files_info</span><span class="p">,</span> <span class="nv">$file_id</span><span class="p">)</span> <span class="k">use</span><span class="p">(</span><span class="nv">$files</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nv">$files_info</span><span class="p">[]</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">([</span>
                            <span class="s1">'id'</span> <span class="o">=&gt;</span> <span class="nv">$file_id</span><span class="p">,</span>
                            <span class="s1">'filename'</span> <span class="o">=&gt;</span> <span class="nv">$files</span><span class="p">[</span><span class="nv">$file_id</span><span class="p">]</span><span class="o">-&gt;</span><span class="nf">getFullName</span><span class="p">(),</span>
                        <span class="p">],</span> <span class="nv">$files</span><span class="p">[</span><span class="nv">$file_id</span><span class="p">]</span><span class="o">-&gt;</span><span class="nf">getMetaAll</span><span class="p">());</span>
                        <span class="k">return</span> <span class="nv">$files_info</span><span class="p">;</span>
                    <span class="p">},</span> <span class="p">[]);</span>
                    <span class="nb">usort</span><span class="p">(</span><span class="nv">$output</span><span class="p">[</span><span class="s1">'files'</span><span class="p">][</span><span class="nv">$destination_id</span><span class="p">],</span> <span class="k">function</span><span class="p">(</span><span class="nv">$file1</span><span class="p">,</span> <span class="nv">$file2</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">// TODO What if datestamp is not available?</span>
                        <span class="nv">$a</span> <span class="o">=</span> <span class="nv">$file1</span><span class="p">[</span><span class="s1">'datestamp'</span><span class="p">];</span>
                        <span class="nv">$b</span> <span class="o">=</span> <span class="nv">$file2</span><span class="p">[</span><span class="s1">'datestamp'</span><span class="p">];</span>
                        <span class="k">if</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">==</span> <span class="nv">$b</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
                        <span class="k">return</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">&lt;</span> <span class="nv">$b</span><span class="p">)</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>
                    <span class="p">});</span>
                <span class="p">}</span>
                <span class="k">catch</span> <span class="p">(</span><span class="nc">\Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">logger</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">error</span><span class="p">(</span><span class="nf">dt</span><span class="p">(</span><span class="s1">'The destination !id caused an error: !error'</span><span class="p">,</span> <span class="p">[</span>
                        <span class="s1">'!id'</span> <span class="o">=&gt;</span> <span class="nv">$destination_id</span><span class="p">,</span>
                        <span class="s1">'!error'</span> <span class="o">=&gt;</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="nf">getMessage</span><span class="p">()</span>
                    <span class="p">]));</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="no">JSON_PRETTY_PRINT</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cd">/**
     * Backup.
     *
     * @command backup_migrate:backup
     * @aliases bamb
     *
     * @param source_id Identifier of the Backup Source.
     * @param destination_id Identifier of the Backup Destination.
     *
     * @return string Backup completion status
     *
     * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
     *
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">backup</span><span class="p">(</span>
        <span class="nv">$source_id</span><span class="p">,</span>
        <span class="nv">$destination_id</span>
    <span class="p">):</span> <span class="kt">string</span>
    <span class="p">{</span>
        <span class="nc">Drush</span><span class="o">::</span><span class="nf">bootstrapManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">doBootstrap</span><span class="p">(</span><span class="nc">DrupalBootLevels</span><span class="o">::</span><span class="no">FULL</span><span class="p">);</span>
        <span class="nv">$bam</span> <span class="o">=</span> <span class="nf">\backup_migrate_get_service_object</span><span class="p">();</span>
        <span class="nv">$bam</span><span class="o">-&gt;</span><span class="nf">backup</span><span class="p">(</span><span class="nv">$source_id</span><span class="p">,</span> <span class="nv">$destination_id</span><span class="p">);</span>
        <span class="k">return</span> <span class="nb">json_encode</span><span class="p">([</span>
            <span class="s1">'status'</span> <span class="o">=&gt;</span> <span class="s1">'success'</span><span class="p">,</span>
            <span class="s1">'message'</span> <span class="o">=&gt;</span> <span class="nf">dt</span><span class="p">(</span><span class="s1">'Backup complete.'</span><span class="p">)</span>
        <span class="p">],</span> <span class="no">JSON_PRETTY_PRINT</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cd">/**
     * Restore.
     *
     * @command backup_migrate:restore
     * @aliases bamr
     *
     * @param source_id Identifier of the Backup Source.
     * @param destination_id Identifier of the Backup Destination.
     * @param file_id optional Identifier of the Destination file.
     *
     * @return string Restore completion status
     *
     * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
     *
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">restore</span><span class="p">(</span>
        <span class="nv">$source_id</span><span class="p">,</span>
        <span class="nv">$destination_id</span><span class="p">,</span>
        <span class="nv">$file_id</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
    <span class="p">):</span> <span class="kt">string</span>
    <span class="p">{</span>
        <span class="nc">Drush</span><span class="o">::</span><span class="nf">bootstrapManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">doBootstrap</span><span class="p">(</span><span class="nc">DrupalBootLevels</span><span class="o">::</span><span class="no">FULL</span><span class="p">);</span>
        <span class="nv">$bam</span> <span class="o">=</span> <span class="nf">\backup_migrate_get_service_object</span><span class="p">();</span>
        <span class="nv">$bam</span><span class="o">-&gt;</span><span class="nf">restore</span><span class="p">(</span><span class="nv">$source_id</span><span class="p">,</span> <span class="nv">$destination_id</span><span class="p">,</span> <span class="nv">$file_id</span><span class="p">);</span>
        <span class="k">return</span> <span class="nb">json_encode</span><span class="p">([</span>
            <span class="s1">'status'</span> <span class="o">=&gt;</span> <span class="s1">'success'</span><span class="p">,</span>
            <span class="s1">'message'</span> <span class="o">=&gt;</span> <span class="nf">dt</span><span class="p">(</span><span class="s1">'Restore complete.'</span><span class="p">)</span>
        <span class="p">],</span> <span class="no">JSON_PRETTY_PRINT</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[Supporting content migrations across stages is a tricky subject, and most tools I reviewed seemed too fragile or too complex to be delivered to a client. We opted to use a simple workflow based on BAM (Backup and Migrate) coupled with config re-synchronization. To help automate the process, I wrote a set of drush commands that implement BAM backup and restore. It’s been tested extensively, but only with a specific set of sources and destinations, so I am reproducing the current code here until it gets published as a module. One design decision I made was to produce output as JSON, to make it easier for downstream automation. The typical usage scenario is the following: $ drush bamb default_db private_files // =&gt; { // "status": "success", // "message": "Backup complete." //} $ drush bamls --files=private_files // =&gt; { // "sources": [ // { // "id": "default_db", // "label": "Default Drupal Database", // "type": "DefaultDB" // }, // { // "id": "entire_site", // "label": "Entire Site (do not use)", // "type": "EntireSite" // }, // { // "id": "private_files", // "label": "Private Files Directory", // "type": "DrupalFiles" // }, // { // "id": "public_files", // "label": "Public Files Directory", // "type": "DrupalFiles" // }, // { // "id": "ssot_database", // "label": "SSoT Database", // "type": "PostgreSQL" // } // ], // "destinations": [ // { // "id": "private_files", // "label": "Private Files Directory", // "type": "Directory" // }, // { // "id": "s3_bucket", // "label": "S3 Bucket", // "type": "awss3" // } // ], // "files": { // "private_files": [ // { // "id": "backup-2023-01-27T15-44-19.sql.gz", // "filename": "prod-2023-01-27T15-44-19.sql.gz", // "filesize": 19499222, // "datestamp": 1674869134 // } // ] // } //} $ drush bamr default_db private_files backup-2023-01-27T15-44-19.sql.gz // =&gt; { // "status": "success", // "message": "Restore complete." //} And here’s the source for the command: &lt;?php namespace Drush\Commands; use Drush\Drush; use Drush\Commands\DrushCommands; use Drush\Boot\DrupalBootLevels; use Drupal\backup_migrate\Core\Destination\ListableDestinationInterface; use Symfony\Component\Console\Input\InputOption; class BackupMigrateCommands extends DrushCommands { /** * List sources and destinations. * * @command backup_migrate:list * @aliases bamls * * @option sources Flag to list sources (default: yes, use --no-sources to hide) * @option destinations Flag to list destinations (default: yes, use --no-destinations to hide) * @option files Flag to list files for a comma-separated list of destination identifiers (default: none) * * @param options * * @return string JSON listing of sources, destinations, files * */ public function list(array $options = [ 'sources' =&gt; true, 'destinations' =&gt; true, 'files' =&gt; InputOption::VALUE_REQUIRED, ]): string { Drush::bootstrapManager()-&gt;doBootstrap(DrupalBootLevels::FULL); $bam = \backup_migrate_get_service_object(); $output = []; if ($options['sources']) { $output['sources'] = array_reduce(array_keys($bam-&gt;sources()-&gt;getAll()), function($sources, $source_id) { $source = \Drupal::entityTypeManager()-&gt;getStorage('backup_migrate_source')-&gt;load($source_id); if ($source) { $sources[] = [ 'id' =&gt; $source_id, 'label' =&gt; $source-&gt;get('label'), 'type' =&gt; $source-&gt;get('type'), ]; } return $sources; }, []); } if ($options['destinations']) { $output['destinations'] = array_reduce(array_keys($bam-&gt;destinations()-&gt;getAll()), function($destinations, $destination_id) { $destination = \Drupal::entityTypeManager()-&gt;getStorage('backup_migrate_destination')-&gt;load($destination_id); if ($destination) { $destinations[] = [ 'id' =&gt; $destination_id, 'label' =&gt; $destination-&gt;get('label'), 'type' =&gt; $destination-&gt;get('type'), ]; } return $destinations; }, []); } if ($options['files']) { foreach(array_map('trim', explode(',', $options['files'])) as $destination_id) { $destination = $bam-&gt;destinations()-&gt;get($destination_id); if (!$destination) { $this-&gt;logger()-&gt;warning(dt('The destination !id does not exist.', ['!id' =&gt; $destination_id])); continue; } if (!$destination instanceof ListableDestinationInterface) { $this-&gt;logger()-&gt;warning(dt('The destination !id is not listable.', ['!id' =&gt; $destination_id])); continue; } try { $files = $destination-&gt;listFiles(); $output['files'][$destination_id] = array_reduce(array_keys($files), function($files_info, $file_id) use($files) { $files_info[] = array_merge([ 'id' =&gt; $file_id, 'filename' =&gt; $files[$file_id]-&gt;getFullName(), ], $files[$file_id]-&gt;getMetaAll()); return $files_info; }, []); usort($output['files'][$destination_id], function($file1, $file2) { // TODO What if datestamp is not available? $a = $file1['datestamp']; $b = $file2['datestamp']; if ($a == $b) return 0; return ($a &lt; $b) ? -1 : 1; }); } catch (\Exception $e) { $this-&gt;logger()-&gt;error(dt('The destination !id caused an error: !error', [ '!id' =&gt; $destination_id, '!error' =&gt; $e-&gt;getMessage() ])); } } } return json_encode($output, JSON_PRETTY_PRINT); } /** * Backup. * * @command backup_migrate:backup * @aliases bamb * * @param source_id Identifier of the Backup Source. * @param destination_id Identifier of the Backup Destination. * * @return string Backup completion status * * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException * */ public function backup( $source_id, $destination_id ): string { Drush::bootstrapManager()-&gt;doBootstrap(DrupalBootLevels::FULL); $bam = \backup_migrate_get_service_object(); $bam-&gt;backup($source_id, $destination_id); return json_encode([ 'status' =&gt; 'success', 'message' =&gt; dt('Backup complete.') ], JSON_PRETTY_PRINT); } /** * Restore. * * @command backup_migrate:restore * @aliases bamr * * @param source_id Identifier of the Backup Source. * @param destination_id Identifier of the Backup Destination. * @param file_id optional Identifier of the Destination file. * * @return string Restore completion status * * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException * */ public function restore( $source_id, $destination_id, $file_id = null, ): string { Drush::bootstrapManager()-&gt;doBootstrap(DrupalBootLevels::FULL); $bam = \backup_migrate_get_service_object(); $bam-&gt;restore($source_id, $destination_id, $file_id); return json_encode([ 'status' =&gt; 'success', 'message' =&gt; dt('Restore complete.') ], JSON_PRETTY_PRINT); } }]]></summary></entry><entry><title type="html">Drupal 9: Fixing Google Charts rendering in tabbed pages</title><link href="https://blog.karimratib.me/2023/05/01/google-charts-tabs.html" rel="alternate" type="text/html" title="Drupal 9: Fixing Google Charts rendering in tabbed pages" /><published>2023-05-01T00:00:00-07:00</published><updated>2023-05-01T00:00:00-07:00</updated><id>https://blog.karimratib.me/2023/05/01/google-charts-tabs</id><content type="html" xml:base="https://blog.karimratib.me/2023/05/01/google-charts-tabs.html"><![CDATA[<p>Google Charts has a <a href="https://stackoverflow.com/search?q=google+charts+hidden">long-standing, known issue rendering correctly in hidden divs</a>. This caused us much head scratching and debugging hours before we even landed on the correct diagnosis: a chart that renders correctly on the <a href="https://git.drupalcode.org/project/charts/-/tree/5.0.x/modules/charts_api_example">Charts API Example page</a> does not work inside a tab! Oh, the joys of programming sometimes.</p>

<p>Once diagnosed, the fix was obvious: Detect that a tab is selected to refresh the charts contained therein. The following JavaScript file can be added to your theme as is and should handle the standard Bootstrap tabs (it also fixes the window resize event handling). It does depend on a small patch made to the <a href="https://git.drupalcode.org/project/charts/-/tree/5.0.x/modules/charts_google"><code class="language-plaintext highlighter-rouge">charts_google</code> module</a>, to avoid leaking memory when the graph is redrawn:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">Drupal</span><span class="p">,</span> <span class="nx">once</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">(</span><span class="dl">"</span><span class="s2">use strict</span><span class="dl">"</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nf">redrawGoogleChart</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">contents</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Drupal</span><span class="p">.</span><span class="nx">Charts</span><span class="p">.</span><span class="nc">Contents</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">chartId</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">Drupal</span><span class="p">.</span><span class="nx">googleCharts</span><span class="p">.</span><span class="nx">charts</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="nx">chartId</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">Drupal</span><span class="p">.</span><span class="nx">googleCharts</span><span class="p">.</span><span class="nx">charts</span><span class="p">[</span><span class="nx">chartId</span><span class="p">].</span><span class="nf">clearChart</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="kd">const</span> <span class="nx">dataAttributes</span> <span class="o">=</span> <span class="nx">contents</span><span class="p">.</span><span class="nf">getData</span><span class="p">(</span><span class="nx">chartId</span><span class="p">);</span>
    <span class="nx">Drupal</span><span class="p">.</span><span class="nx">googleCharts</span><span class="p">.</span><span class="nf">drawChart</span><span class="p">(</span><span class="nx">chartId</span><span class="p">,</span> <span class="nx">dataAttributes</span><span class="p">[</span><span class="dl">'</span><span class="s1">visualization</span><span class="dl">'</span><span class="p">],</span> <span class="nx">dataAttributes</span><span class="p">[</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">],</span> <span class="nx">dataAttributes</span><span class="p">[</span><span class="dl">'</span><span class="s1">options</span><span class="dl">'</span><span class="p">])();</span>
  <span class="p">}</span>

  <span class="nx">Drupal</span><span class="p">.</span><span class="nx">behaviors</span><span class="p">.</span><span class="nx">redrawGoogleCharts</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">attach</span><span class="p">:</span> <span class="nf">function </span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">settings</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.nav-link</span><span class="dl">'</span><span class="p">,</span> <span class="nx">context</span><span class="p">).</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">shown.bs.tab</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">Drupal</span><span class="p">.</span><span class="nx">Charts</span> <span class="o">&amp;&amp;</span> <span class="nx">Drupal</span><span class="p">.</span><span class="nx">googleCharts</span><span class="p">)</span> <span class="p">{</span>
          <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.charts-google</span><span class="dl">'</span><span class="p">,</span> <span class="nf">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">data-bs-target</span><span class="dl">'</span><span class="p">)).</span><span class="nf">each</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
              <span class="nf">redrawGoogleChart</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
            <span class="p">}</span>
          <span class="p">});</span>
        <span class="p">}</span>
      <span class="p">});</span>

      <span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">resize</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">Drupal</span><span class="p">.</span><span class="nx">Charts</span> <span class="o">&amp;&amp;</span> <span class="nx">Drupal</span><span class="p">.</span><span class="nx">googleCharts</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">Drupal</span><span class="p">.</span><span class="nx">googleCharts</span><span class="p">.</span><span class="nf">waitForFinalEvent</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
            <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.charts-google</span><span class="dl">'</span><span class="p">).</span><span class="nf">each</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
              <span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
                <span class="nf">redrawGoogleChart</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
              <span class="p">}</span>
            <span class="p">});</span>
          <span class="p">},</span> <span class="mi">200</span><span class="p">,</span> <span class="dl">'</span><span class="s1">google-charts-redraw</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">});</span>
    <span class="p">},</span>
  <span class="p">};</span>

<span class="p">})(</span><span class="nx">jQuery</span><span class="p">,</span> <span class="nx">Drupal</span><span class="p">,</span> <span class="nx">once</span><span class="p">);</span>
</code></pre></div></div>
<div class="language-patch highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/modules/charts_google/js/charts_google.js b/modules/charts_google/js/charts_google.js
index f7abe81..76143bc 100755
</span><span class="gd">--- a/modules/charts_google/js/charts_google.js
</span><span class="gi">+++ b/modules/charts_google/js/charts_google.js
</span><span class="p">@@ -6,7 +6,7 @@</span>
<span class="err">
</span>   'use strict';
<span class="err">
</span><span class="gd">-  Drupal.googleCharts = Drupal.googleCharts || {charts: []};
</span><span class="gi">+  Drupal.googleCharts = Drupal.googleCharts || {charts: {}};
</span><span class="err">
</span>   /**
    * Behavior to initialize Google Charts.
<span class="p">@@ -122,6 +122,7 @@</span>
         options['colorAxis'] = {colors: colors};
       }
       chart.draw(data, options);
<span class="gi">+      Drupal.googleCharts.charts[chartId] = chart;
</span>     };
   };
</code></pre></div></div>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[Google Charts has a long-standing, known issue rendering correctly in hidden divs. This caused us much head scratching and debugging hours before we even landed on the correct diagnosis: a chart that renders correctly on the Charts API Example page does not work inside a tab! Oh, the joys of programming sometimes. Once diagnosed, the fix was obvious: Detect that a tab is selected to refresh the charts contained therein. The following JavaScript file can be added to your theme as is and should handle the standard Bootstrap tabs (it also fixes the window resize event handling). It does depend on a small patch made to the charts_google module, to avoid leaking memory when the graph is redrawn: (function ($, Drupal, once) { ("use strict"); function redrawGoogleChart(element) { const contents = new Drupal.Charts.Contents(); const chartId = element.id; if (Drupal.googleCharts.charts.hasOwnProperty(chartId)) { Drupal.googleCharts.charts[chartId].clearChart(); } const dataAttributes = contents.getData(chartId); Drupal.googleCharts.drawChart(chartId, dataAttributes['visualization'], dataAttributes['data'], dataAttributes['options'])(); } Drupal.behaviors.redrawGoogleCharts = { attach: function (context, settings) { $('.nav-link', context).on('shown.bs.tab', function (e) { if (Drupal.Charts &amp;&amp; Drupal.googleCharts) { $('.charts-google', $(e.target).attr('data-bs-target')).each(function () { if (this.dataset.hasOwnProperty('chart')) { redrawGoogleChart(this); } }); } }); window.addEventListener('resize', function () { if (Drupal.Charts &amp;&amp; Drupal.googleCharts) { Drupal.googleCharts.waitForFinalEvent(function () { $('.charts-google').each(function () { if (this.dataset.hasOwnProperty('chart')) { redrawGoogleChart(this); } }); }, 200, 'google-charts-redraw'); } }); }, }; })(jQuery, Drupal, once); diff --git a/modules/charts_google/js/charts_google.js b/modules/charts_google/js/charts_google.js index f7abe81..76143bc 100755 --- a/modules/charts_google/js/charts_google.js +++ b/modules/charts_google/js/charts_google.js @@ -6,7 +6,7 @@ 'use strict'; - Drupal.googleCharts = Drupal.googleCharts || {charts: []}; + Drupal.googleCharts = Drupal.googleCharts || {charts: {}}; /** * Behavior to initialize Google Charts. @@ -122,6 +122,7 @@ options['colorAxis'] = {colors: colors}; } chart.draw(data, options); + Drupal.googleCharts.charts[chartId] = chart; }; };]]></summary></entry><entry><title type="html">Drupal 9: Backup and Migrate - PostgreSQL support</title><link href="https://blog.karimratib.me/2023/04/01/backup-migrate-postgresql.html" rel="alternate" type="text/html" title="Drupal 9: Backup and Migrate - PostgreSQL support" /><published>2023-04-01T00:00:00-07:00</published><updated>2023-04-01T00:00:00-07:00</updated><id>https://blog.karimratib.me/2023/04/01/backup-migrate-postgresql</id><content type="html" xml:base="https://blog.karimratib.me/2023/04/01/backup-migrate-postgresql.html"><![CDATA[<p>I was suprised this hadn’t been already done, so I <a href="https://www.drupal.org/project/backup_migrate/issues/2930369">added PostgreSQL support to the venerable Backup and Migrate (BAM) module</a>. Instead of previous patches that implemented SQL generation and parsing manually, I opted for the much simpler and (imho) more robust approach of invoking the standard tools <code class="language-plaintext highlighter-rouge">pg_dump</code> and <code class="language-plaintext highlighter-rouge">pgsql</code> for the backup and restore operations. It took me less than a day to get that patch working, and we’ve been using it daily on this project for the past 8 months, so I have good confidence it is production-ready.</p>

<p>For example, the backup implementation is about 40 lines long:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cd">/**
   * Export this source to the given temp file.
   *
   * This should be the main back up function for this source.
   *
   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
   *   A backup file with the contents of the source dumped to it.
   */</span>
  <span class="k">public</span> <span class="k">function</span> <span class="n">exportToFile</span><span class="p">()</span> <span class="p">{</span>
    <span class="nv">$adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DrupalTempFileAdapter</span><span class="p">(</span><span class="nc">\Drupal</span><span class="o">::</span><span class="nf">service</span><span class="p">(</span><span class="s1">'file_system'</span><span class="p">));</span>
    <span class="nv">$tempfilemanager</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TempFileManager</span><span class="p">(</span><span class="nv">$adapter</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">setTempFileManager</span><span class="p">(</span><span class="nv">$tempfilemanager</span><span class="p">);</span>
    <span class="nv">$file</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getTempFileManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">create</span><span class="p">(</span><span class="s1">'sql'</span><span class="p">);</span>

    <span class="c1">// A bit of PHP magic to get the configuration of the db_exclude plugin.</span>
    <span class="c1">// The PluginManagerInterface::get($plugin_id) method returns a PluginInterface which does not expose the confGet() method.</span>
    <span class="c1">// So we want to cast it to a PluginBase which does expose confGet().</span>
    <span class="c1">// Since PHP doesn't have an explicit casting operator for classes, we use an inline function whose return type is PluginBase.</span>
    <span class="c1">// https://stackoverflow.com/a/69771390/209184</span>
    <span class="nv">$exclude_tables</span> <span class="o">=</span> <span class="p">(</span><span class="k">array</span><span class="p">)</span> <span class="p">(</span><span class="k">fn</span><span class="p">(</span><span class="nv">$plugin</span><span class="p">):</span><span class="kt">PluginBase</span><span class="o">=&gt;</span><span class="nv">$plugin</span><span class="p">)(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">plugins</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'db_exclude'</span><span class="p">))</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'exclude_tables'</span><span class="p">);</span>
    <span class="nv">$nodata_tables</span> <span class="o">=</span> <span class="p">(</span><span class="k">array</span><span class="p">)</span> <span class="p">(</span><span class="k">fn</span><span class="p">(</span><span class="nv">$plugin</span><span class="p">):</span><span class="kt">PluginBase</span><span class="o">=&gt;</span><span class="nv">$plugin</span><span class="p">)(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">plugins</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'db_exclude'</span><span class="p">))</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'nodata_tables'</span><span class="p">);</span>

    <span class="nv">$process_args</span> <span class="o">=</span> <span class="p">[</span>
      <span class="s1">'pg_dump'</span><span class="p">,</span>
      <span class="s1">'--host'</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'host'</span><span class="p">),</span>
      <span class="s1">'--port'</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'port'</span><span class="p">),</span>
      <span class="s1">'--user'</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'username'</span><span class="p">),</span>
      <span class="s1">'--clean'</span>
    <span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$exclude_tables</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">foreach</span><span class="p">(</span><span class="nv">$exclude_tables</span> <span class="k">as</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">array_push</span><span class="p">(</span><span class="nv">$process_args</span><span class="p">,</span> <span class="s1">'--exclude-table'</span><span class="p">,</span> <span class="nv">$table</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$nodata_tables</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">foreach</span><span class="p">(</span><span class="nv">$nodata_tables</span> <span class="k">as</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">array_push</span><span class="p">(</span><span class="nv">$process_args</span><span class="p">,</span> <span class="s1">'--exclude-table-data'</span><span class="p">,</span> <span class="nv">$table</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nv">$process</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Process</span><span class="p">(</span>
      <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$process_args</span><span class="p">,</span> <span class="p">[</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'database'</span><span class="p">)]),</span>
      <span class="kc">null</span><span class="p">,</span>
      <span class="p">[</span>
        <span class="s1">'PGPASSWORD'</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">confGet</span><span class="p">(</span><span class="s1">'password'</span><span class="p">)</span>
      <span class="p">]</span>
    <span class="p">);</span>
    <span class="nv">$process</span><span class="o">-&gt;</span><span class="nf">run</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$process</span><span class="o">-&gt;</span><span class="nf">isSuccessful</span><span class="p">())</span> <span class="p">{</span>
      <span class="nv">$message</span> <span class="o">=</span> <span class="nv">$process</span><span class="o">-&gt;</span><span class="nf">getErrorOutput</span><span class="p">();</span>
      <span class="nc">\Drupal</span><span class="o">::</span><span class="nf">logger</span><span class="p">(</span><span class="s1">'backup_migrate'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">error</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">BackupMigrateException</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nv">$file</span><span class="o">-&gt;</span><span class="nf">write</span><span class="p">(</span><span class="nv">$process</span><span class="o">-&gt;</span><span class="nf">getOutput</span><span class="p">());</span>
    <span class="nv">$file</span><span class="o">-&gt;</span><span class="nf">close</span><span class="p">();</span>
    <span class="k">return</span> <span class="nv">$file</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[I was suprised this hadn’t been already done, so I added PostgreSQL support to the venerable Backup and Migrate (BAM) module. Instead of previous patches that implemented SQL generation and parsing manually, I opted for the much simpler and (imho) more robust approach of invoking the standard tools pg_dump and pgsql for the backup and restore operations. It took me less than a day to get that patch working, and we’ve been using it daily on this project for the past 8 months, so I have good confidence it is production-ready. For example, the backup implementation is about 40 lines long: /** * Export this source to the given temp file. * * This should be the main back up function for this source. * * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface * A backup file with the contents of the source dumped to it. */ public function exportToFile() { $adapter = new DrupalTempFileAdapter(\Drupal::service('file_system')); $tempfilemanager = new TempFileManager($adapter); $this-&gt;setTempFileManager($tempfilemanager); $file = $this-&gt;getTempFileManager()-&gt;create('sql'); // A bit of PHP magic to get the configuration of the db_exclude plugin. // The PluginManagerInterface::get($plugin_id) method returns a PluginInterface which does not expose the confGet() method. // So we want to cast it to a PluginBase which does expose confGet(). // Since PHP doesn't have an explicit casting operator for classes, we use an inline function whose return type is PluginBase. // https://stackoverflow.com/a/69771390/209184 $exclude_tables = (array) (fn($plugin):PluginBase=&gt;$plugin)($this-&gt;plugins()-&gt;get('db_exclude'))-&gt;confGet('exclude_tables'); $nodata_tables = (array) (fn($plugin):PluginBase=&gt;$plugin)($this-&gt;plugins()-&gt;get('db_exclude'))-&gt;confGet('nodata_tables'); $process_args = [ 'pg_dump', '--host', $this-&gt;confGet('host'), '--port', $this-&gt;confGet('port'), '--user', $this-&gt;confGet('username'), '--clean' ]; if ($exclude_tables) { foreach($exclude_tables as $table) { array_push($process_args, '--exclude-table', $table); } } if ($nodata_tables) { foreach($nodata_tables as $table) { array_push($process_args, '--exclude-table-data', $table); } } $process = new Process( array_merge($process_args, [$this-&gt;confGet('database')]), null, [ 'PGPASSWORD' =&gt; $this-&gt;confGet('password') ] ); $process-&gt;run(); if (!$process-&gt;isSuccessful()) { $message = $process-&gt;getErrorOutput(); \Drupal::logger('backup_migrate')-&gt;error($message); throw new BackupMigrateException($message); } $file-&gt;write($process-&gt;getOutput()); $file-&gt;close(); return $file; }]]></summary></entry><entry><title type="html">Drupal 9: Showing an export link for each manually updated config item</title><link href="https://blog.karimratib.me/2023/03/01/export-link.html" rel="alternate" type="text/html" title="Drupal 9: Showing an export link for each manually updated config item" /><published>2023-03-01T00:00:00-08:00</published><updated>2023-03-01T00:00:00-08:00</updated><id>https://blog.karimratib.me/2023/03/01/export-link</id><content type="html" xml:base="https://blog.karimratib.me/2023/03/01/export-link.html"><![CDATA[<p>The <a href="https://www.drupal.org/docs/drupal-apis/configuration-api">Configuration API</a> is by far the best surprise I got about Drupal 9. Finally, a core system that is robust enough to hold any configuration set reliably, and extensible enough for contrib modules. Back in Drupal 7, maintaining a consistent configuration across stages had been the bane of my existence, and I was delighted to find it was now a solved problem.</p>

<p>One minor wrinkle I found is related to the scenario of admin users wanting to update the configs that are otherwise stored in source control:</p>
<ul>
  <li>Admin changes a permission on stage PROD via Admin UI</li>
  <li>Devops makes a code deployment on stages DEV =&gt; TEST =&gt; PROD</li>
  <li>The permission change is lost, unless Admin exports the updated permission config and hands it to Devops before deployment</li>
</ul>

<p>To support this scenario, Admin needs to go to <strong>Configuration synchronization</strong> <code class="language-plaintext highlighter-rouge">/admin/config/development/configuration</code>, examine the changed items, then head over to <strong>Single export</strong> <code class="language-plaintext highlighter-rouge">/admin/config/development/configuration/single/export</code> and GUESS how the name that they saw on the previous screen maps to a given configuration type/name pair on this one. User-unfriendly and error-prone!</p>

<p>My quick solution was to add an <strong>Export config</strong> action for each updated item in the <strong>Configuration synchronization</strong> screen, as per the attached screenshot. This was feasible to implement because <a href="https://git.drupalcode.org/project/drupal/-/blob/9.5.3/core/modules/config/config.routing.yml#L56-64">the <strong>Single export</strong> route actually accepts a specific configuration type/name pair</a>, which my code computes given the configuration item (and that was not terribly straightforward). Now Admin can easily export all modified configuration items without any guesswork!</p>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/drupal-config-sync.png">
      <img src="/assets/drupal-config-sync.png" style="max-width: 100%;" alt="" />
    </a>
    <figcaption></figcaption>
  </figure>
</div>

<div class="flex-center">
  <figure class="image">
    <a href="/assets/drupal-config-export.png">
      <img src="/assets/drupal-config-export.png" style="max-width: 100%;" alt="" />
    </a>
    <figcaption></figcaption>
  </figure>
</div>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">use</span> <span class="nc">Drupal\Core\Config\Entity\ConfigEntityInterface</span><span class="p">;</span>

<span class="cd">/**
 * Implements hook_form_FORM_ID_alter() for config_admin_import_form.
 *
 * Show export link for each modified config item.
 */</span>
<span class="k">function</span> <span class="n">MYMODULE_form_config_admin_import_form_alter</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$form</span><span class="p">,</span> <span class="nc">FormStateInterface</span> <span class="nv">$form_state</span><span class="p">,</span> <span class="nv">$form_id</span><span class="p">)</span> <span class="p">{</span>
  <span class="nv">$configs</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">foreach</span> <span class="p">(</span><span class="nc">\Drupal</span><span class="o">::</span><span class="nf">service</span><span class="p">(</span><span class="s1">'entity_type.manager'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">getDefinitions</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$entity_type</span> <span class="o">=&gt;</span> <span class="nv">$definition</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$definition</span><span class="o">-&gt;</span><span class="nf">entityClassImplements</span><span class="p">(</span><span class="nc">ConfigEntityInterface</span><span class="o">::</span><span class="n">class</span><span class="p">))</span> <span class="p">{</span>
      <span class="nv">$entity_storage</span> <span class="o">=</span> <span class="nc">\Drupal</span><span class="o">::</span><span class="nf">service</span><span class="p">(</span><span class="s1">'entity_type.manager'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">getStorage</span><span class="p">(</span><span class="nv">$entity_type</span><span class="p">);</span>
      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$entity_storage</span><span class="o">-&gt;</span><span class="nf">loadMultiple</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$entity</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$configs</span><span class="p">[</span><span class="nv">$definition</span><span class="o">-&gt;</span><span class="nf">getConfigPrefix</span><span class="p">()</span> <span class="mf">.</span> <span class="s1">'.'</span> <span class="mf">.</span> <span class="nv">$entity</span><span class="o">-&gt;</span><span class="nf">id</span><span class="p">()]</span> <span class="o">=</span> <span class="p">[</span>
          <span class="s1">'config_type'</span> <span class="o">=&gt;</span> <span class="nv">$entity_type</span><span class="p">,</span>
          <span class="s1">'config_name'</span> <span class="o">=&gt;</span> <span class="nv">$entity</span><span class="o">-&gt;</span><span class="nf">id</span><span class="p">(),</span>
        <span class="p">];</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nv">$collection</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
  <span class="nv">$config_change_type</span> <span class="o">=</span> <span class="s1">'update'</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$form</span><span class="p">[</span><span class="nv">$collection</span><span class="p">][</span><span class="nv">$config_change_type</span><span class="p">][</span><span class="s1">'list'</span><span class="p">][</span><span class="s1">'#rows'</span><span class="p">]))</span> <span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$form</span><span class="p">[</span><span class="nv">$collection</span><span class="p">][</span><span class="nv">$config_change_type</span><span class="p">][</span><span class="s1">'list'</span><span class="p">][</span><span class="s1">'#rows'</span><span class="p">]</span> <span class="k">as</span> <span class="o">&amp;</span><span class="nv">$config_change</span><span class="p">)</span> <span class="p">{</span>
      <span class="nv">$config_item</span> <span class="o">=</span> <span class="nv">$config_change</span><span class="p">[</span><span class="s1">'name'</span><span class="p">];</span>

      <span class="k">if</span> <span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="nv">$config_item</span><span class="p">,</span> <span class="nv">$configs</span><span class="p">))</span> <span class="p">{</span>
        <span class="nv">$config_type</span> <span class="o">=</span> <span class="nv">$configs</span><span class="p">[</span><span class="nv">$config_item</span><span class="p">][</span><span class="s1">'config_type'</span><span class="p">];</span>
        <span class="nv">$config_name</span> <span class="o">=</span> <span class="nv">$configs</span><span class="p">[</span><span class="nv">$config_item</span><span class="p">][</span><span class="s1">'config_name'</span><span class="p">];</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
        <span class="nv">$config_type</span> <span class="o">=</span> <span class="s1">'system.simple'</span><span class="p">;</span>
        <span class="nv">$config_name</span> <span class="o">=</span> <span class="nv">$config_item</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="nv">$config_change</span><span class="p">[</span><span class="s1">'operations'</span><span class="p">][</span><span class="s1">'data'</span><span class="p">][</span><span class="s1">'#links'</span><span class="p">][</span><span class="s1">'export'</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">'title'</span> <span class="o">=&gt;</span> <span class="nf">t</span><span class="p">(</span><span class="s1">'Export config'</span><span class="p">),</span>
        <span class="s1">'url'</span> <span class="o">=&gt;</span> <span class="nc">Url</span><span class="o">::</span><span class="nf">fromRoute</span><span class="p">(</span><span class="s1">'config.export_single'</span><span class="p">,</span> <span class="p">[</span>
          <span class="s1">'config_type'</span> <span class="o">=&gt;</span> <span class="nv">$config_type</span><span class="p">,</span>
          <span class="s1">'config_name'</span> <span class="o">=&gt;</span> <span class="nv">$config_name</span><span class="p">,</span>
        <span class="p">]),</span>
      <span class="p">];</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[The Configuration API is by far the best surprise I got about Drupal 9. Finally, a core system that is robust enough to hold any configuration set reliably, and extensible enough for contrib modules. Back in Drupal 7, maintaining a consistent configuration across stages had been the bane of my existence, and I was delighted to find it was now a solved problem. One minor wrinkle I found is related to the scenario of admin users wanting to update the configs that are otherwise stored in source control: Admin changes a permission on stage PROD via Admin UI Devops makes a code deployment on stages DEV =&gt; TEST =&gt; PROD The permission change is lost, unless Admin exports the updated permission config and hands it to Devops before deployment To support this scenario, Admin needs to go to Configuration synchronization /admin/config/development/configuration, examine the changed items, then head over to Single export /admin/config/development/configuration/single/export and GUESS how the name that they saw on the previous screen maps to a given configuration type/name pair on this one. User-unfriendly and error-prone! My quick solution was to add an Export config action for each updated item in the Configuration synchronization screen, as per the attached screenshot. This was feasible to implement because the Single export route actually accepts a specific configuration type/name pair, which my code computes given the configuration item (and that was not terribly straightforward). Now Admin can easily export all modified configuration items without any guesswork! use Drupal\Core\Config\Entity\ConfigEntityInterface; /** * Implements hook_form_FORM_ID_alter() for config_admin_import_form. * * Show export link for each modified config item. */ function MYMODULE_form_config_admin_import_form_alter(&amp;$form, FormStateInterface $form_state, $form_id) { $configs = []; foreach (\Drupal::service('entity_type.manager')-&gt;getDefinitions() as $entity_type =&gt; $definition) { if ($definition-&gt;entityClassImplements(ConfigEntityInterface::class)) { $entity_storage = \Drupal::service('entity_type.manager')-&gt;getStorage($entity_type); foreach ($entity_storage-&gt;loadMultiple() as $entity) { $configs[$definition-&gt;getConfigPrefix() . '.' . $entity-&gt;id()] = [ 'config_type' =&gt; $entity_type, 'config_name' =&gt; $entity-&gt;id(), ]; } } } $collection = ''; $config_change_type = 'update'; if (!empty($form[$collection][$config_change_type]['list']['#rows'])) { foreach ($form[$collection][$config_change_type]['list']['#rows'] as &amp;$config_change) { $config_item = $config_change['name']; if (array_key_exists($config_item, $configs)) { $config_type = $configs[$config_item]['config_type']; $config_name = $configs[$config_item]['config_name']; } else { $config_type = 'system.simple'; $config_name = $config_item; } $config_change['operations']['data']['#links']['export'] = [ 'title' =&gt; t('Export config'), 'url' =&gt; Url::fromRoute('config.export_single', [ 'config_type' =&gt; $config_type, 'config_name' =&gt; $config_name, ]), ]; } } }]]></summary></entry><entry><title type="html">Still Drupal after all these years</title><link href="https://blog.karimratib.me/2023/02/01/still-drupal.html" rel="alternate" type="text/html" title="Still Drupal after all these years" /><published>2023-02-01T00:00:00-08:00</published><updated>2023-02-01T00:00:00-08:00</updated><id>https://blog.karimratib.me/2023/02/01/still-drupal</id><content type="html" xml:base="https://blog.karimratib.me/2023/02/01/still-drupal.html"><![CDATA[<p>I thought I was done with Drupal in 2016 when we rebuilt <a href="https://github.com/meedan/check">Meedan’s fact-checking platform, Check</a>, using Ruby / React. It felt like a breath of fresh air to decouple the frontend from the backend, and further subdivide the application into a set of services that can be designed and maintained independently. Breaking the monolith was all the rage back then!</p>

<p>But I was hired again for my Drupal expertise in 2022. For the past 8 months, I’ve been working on a massive site refresh using Drupal 9, and I must admit that, against my expectations, I really enjoyed working on this platform. I found Drupal 8/9+ to be a real step forward in terms of developer experience compared to previous versions, particularly well-suited to build large web sites.</p>

<p>But I won’t get into the top 10 reasons I like Drupal 9. In this post, I will list a few interesting snippets that I developed over the course of this project:</p>

<ul>
  <li><a href="/2023/03/01/export-link.html">Showing an export link for each manually updated config item</a></li>
  <li><a href="/2023/04/01/backup-migrate-postgresql.html">Backup and Migrate: PostgreSQL support</a></li>
  <li><a href="/2023/06/01/backup-migrate-drush.html">Backup and Migrate: Drupal 9 / Drush 11 support</a></li>
  <li><a href="/2023/05/01/google-charts-tabs.html">Fixing Google Charts rendering in tabbed pages</a></li>
</ul>

<p>I might dig up more snippets later - for now, happy coding! :cat: :computer:</p>]]></content><author><name>Karim Ratib</name><email>karim.ratib@gmail.com</email></author><category term="drupal" /><summary type="html"><![CDATA[I thought I was done with Drupal in 2016 when we rebuilt Meedan’s fact-checking platform, Check, using Ruby / React. It felt like a breath of fresh air to decouple the frontend from the backend, and further subdivide the application into a set of services that can be designed and maintained independently. Breaking the monolith was all the rage back then! But I was hired again for my Drupal expertise in 2022. For the past 8 months, I’ve been working on a massive site refresh using Drupal 9, and I must admit that, against my expectations, I really enjoyed working on this platform. I found Drupal 8/9+ to be a real step forward in terms of developer experience compared to previous versions, particularly well-suited to build large web sites. But I won’t get into the top 10 reasons I like Drupal 9. In this post, I will list a few interesting snippets that I developed over the course of this project: Showing an export link for each manually updated config item Backup and Migrate: PostgreSQL support Backup and Migrate: Drupal 9 / Drush 11 support Fixing Google Charts rendering in tabbed pages I might dig up more snippets later - for now, happy coding! :cat: :computer:]]></summary></entry></feed>